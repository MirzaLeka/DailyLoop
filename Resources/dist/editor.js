"use strict";function placeCaretAtEnd(e){if(e.focus(),void 0!==window.getSelection&&void 0!==document.createRange){var t=document.createRange();t.selectNodeContents(e),t.collapse(!1);var n=window.getSelection();n.removeAllRanges(),n.addRange(t)}else if(void 0!==document.body.createTextRange){var s=document.body.createTextRange();s.moveToElementText(e),s.collapse(!1),s.select()}}function cleanHtml(){var e=$("#editor").html();sanitizeHtml(e,{allowedTags:["div","blockquote","b","strong","i","em","ul","ol","li"],allowedAttributes:{blockquote:["style"]}}).trim();setContent()}function setContent(){$(this).html();placeCaretAtEnd($("#editor").get(0))}function runCommand(e,t,n){if("createLink"===t){var s=prompt("Insert link:");document.execCommand(t,!1,s)}else document.execCommand(t,!1,n);return $("#editor").focus(),!1}!function(a){a.fn.msword_html_filter=function(e){a.extend({},e);return this.each(function(){var t=this;a(t).on("keyup paste",function(){setTimeout(function(){var e=a(t).html();/class="?Mso|style="[^"]*\bmso-|style='[^'']*\bmso-|w:WordDocument/i.test(e)?function(e){var t=e.html();t=(t=(t=(t=(t=t.replace(/<!--[\s\S]+?-->/gi,"")).replace(/<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s\/>]))[^>]*>/gi,"")).replace(/<(\/?)s>/gi,"<$1strike>")).replace(/&nbsp;/gi," ")).replace(/<span\s+style\s*=\s*"\s*mso-spacerun\s*:\s*yes\s*;?\s*"\s*>([\s\u00a0]*)<\/span>/gi,function(e,t){return 0<t.length?t.replace(/./," ").slice(Math.floor(t.length/2)).split("").join("Â "):""}),e.html(t),a("p",e).each(function(){var e=a(this).attr("style"),t=/mso-list:\w+ \w+([0-9]+)/.exec(e);t&&a(this).data("_listLevel",parseInt(t[1],10))});var i=0,r=null;a("p",e).each(function(){var e=a(this).data("_listLevel");if(null!=e){var t=a(this).text(),n="<ul></ul>";if(/^\s*\w+\./.test(t)){var s=/([0-9])\./.exec(t);if(s){var l=parseInt(s[1],10);n=1<l?'<ol start="'+l+'"></ol>':"<ol></ol>"}else n="<ol></ol>"}if(i<e&&(r=0==i?(a(this).before(n),a(this).prev()):a(n).appendTo(r)),e<i)for(var o=0;o<i-e;o++)r=r.parent();a("span:first",this).remove(),r.append("<li>"+a(this).html().replace(/\d+\./g,"")+"</li>"),a("b:empty").remove(),a(this).remove(),i=e}else i=0}),a("[style]",e).removeAttr("style"),a("[align]",e).removeAttr("align"),a("span",e).replaceWith(function(){return a(this).contents()}),a("span:empty",e).remove(),a("[class^='Mso']",e).removeAttr("class"),a("p:empty",e).remove()}(a(t)):cleanHtml()},400)})})}}(jQuery),$(function(){$("#editor").msword_html_filter()}),$("#submit").click(function(e){e.preventDefault();var t=$("#editor").html().trim();alert("VALUE SUBMITTED: \n"+t)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
