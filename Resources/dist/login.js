"use strict";function changeForm(e){var n=document.getElementById("form");0==e?(n.innerHTML='\n        \n        <form class="signup-form" onsubmit="register();return false">\n\n        <h2 class="formHeader">Sign Up</h2>\n\n        <input class="loginInput" name="signupUsername" type="text" placeholder="Username" autofocus/>\n    \n        <input class="loginInput" name="signupEmail" type="text" placeholder="Email"/>   \n    \n        <input class="loginInput" name="signupPassword" id="pass" type="password" placeholder="Password"/>\n\n        <input class="loginInput" name="confirmPassword" id="confirmPass" type="password" placeholder="Confirm Password"/>\n    <br>\n        <input class="btn btn-success formBtn" type="submit" id="confirmBtn" value="REGISTER"/>\n    \n        <p class="changeForm" onclick="changeForm(1)">Already a member?</p>\n\n    </form>\n        \n        ',extraValidation()):(n.innerHTML='\n\n        <form class="signin-form" onsubmit="login();return false">\n        \n        <h2 class="formHeader">Sign In</h2>\n    \n        <input class="loginInput" oninput="fixForm()" name="signinEmail" type="email" placeholder="Email" autofocus/>\n\n        <input class="loginInput" oninput="fixForm()" name="signinPassword" id="signinPass" type="password" placeholder="Password"/>\n            <label id="loginFailed">Incorrect username or password</label>\n    <br id="breakTag">\n        <input class="btn btn-primary formBtn" type="submit" id="loginBtn" value="CONTINUE"/>\n\n        <p class="changeForm" onclick="changeForm(0)">Not a member?</p>\n\n        </form>\n        \n        ',extraConfirmation())}function register(){extraValidation();var e=$("input[name='signupUsername']").val(),n=$("input[name='signupEmail']").val(),a=$("#pass").val(),s=$("#confirmPass").val();if(""!=e&&""!=n&&""!=a&&""!=s&&a==s){var i={username:e,email:n,password:a};$.ajax({type:"POST",url:"/users",contentType:"application/json",dataType:"json",data:JSON.stringify(i),success:function(e){window.location.href="/home"},error:function(e){e.responseJSON.errmsg.substr(60,199).startsWith("u")?alert("Username is already in use"):alert("Email is already in use")}})}}function login(){extraConfirmation();var e=$("input[name='signinEmail']").val(),n=$("#signinPass").val();if(""!=e&&""!=n){var a={email:e,password:n};$.ajax({type:"POST",url:"/users/login",contentType:"application/json",dataType:"json",data:JSON.stringify(a),success:function(e){e&&(window.location.href="/home")},error:function(e){e&&(document.getElementById("loginFailed").style.display="block",$("#breakTag").css("display","none"))}})}}function fixForm(){$("#breakTag").css("display","block"),document.getElementById("loginFailed").style.display="none"}function extraValidation(){$.validator.addMethod("nowhitespace",function(e,n){return this.optional(n)||/^\S+$/i.test(e)},"No white space please."),$.validator.addMethod("strongUsername",function(e,n){return this.optional(n)||6<=e.length&&/[a-z]/i.test(e)},"Username must be at least 6 characters long and contain at least one letter."),$.validator.addMethod("strongPassword",function(e,n){return this.optional(n)||8<=e.length&&/\d/.test(e)&&/[a-z]/i.test(e)&&/[$-/:-?{-~!"^_`\[\]]/.test(e)},"Password must be at least 8 characters long and contain at least one number, one letter and one symbol."),$(".signup-form").validate({rules:{signupUsername:{required:!0,nowhitespace:!0,strongUsername:!0,maxlength:24},signupEmail:{required:!0,email:!0},signupPassword:{required:!0,strongPassword:!0,nowhitespace:!0,maxlength:32},confirmPassword:{required:!0,equalTo:"#pass",nowhitespace:!0},messages:{signupEmail:{required:"Please enter an email address.",email:"Please enter a valid email address."}}}})}function extraConfirmation(){$(".signin-form").validate({rules:{signinEmail:{required:!0,email:!0},signinPassword:{required:!0},messages:{signinEmail:{required:"Please enter an email address.",email:"Please enter a valid email address."}}}})}$(function(){$.validator.addMethod("nowhitespace",function(e,n){return this.optional(n)||/^\S+$/i.test(e)},"No white space please."),$.validator.addMethod("strongUsername",function(e,n){return this.optional(n)||6<=e.length&&/[a-z]/i.test(e)},"Username must be at least 6 characters long and contain at least one letter."),$.validator.addMethod("strongPassword",function(e,n){return this.optional(n)||8<=e.length&&/\d/.test(e)&&/[a-z]/i.test(e)&&/[$-/:-?{-~!"^_`\[\]]/.test(e)},"Password must be at least 8 characters long and contain at least one number, one letter and one symbol."),$(".signin-form").validate({rules:{signinEmail:{required:!0,email:!0},signinPassword:{required:!0,strongPassword:!0,nowhitespace:!0,maxlength:32},messages:{signinEmail:{required:"Please enter an email address.",email:"Please enter a valid email address."}}}}),$(".signup-form").validate({rules:{signupUsername:{required:!0,nowhitespace:!0,strongUsername:!0,maxlength:24},signupEmail:{required:!0,email:!0},signupPassword:{required:!0,strongPassword:!0,nowhitespace:!0,maxlength:32},confirmPassword:{required:!0,equalTo:"#pass",nowhitespace:!0},messages:{signupEmail:{required:"Please enter an email address.",email:"Please enter a valid email address."}}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
