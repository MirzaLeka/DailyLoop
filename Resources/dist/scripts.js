"use strict";var limit="No limit",display="Display all",sort="Date created";$(window).scroll(function(){$("#info").offset().top+50+$("#info").outerHeight()-$(window).height()<=$(this).scrollTop()?$("#scrollBack").fadeIn():$("#scrollBack").fadeOut()}),$("#scrollBack").click(function(){$("html, body").animate({scrollTop:0},1e3)});var scrollPosition="",addDarkSelect=void 0,idsArr=[];function getTodos(){$.ajax({type:"GET",url:"/todos",success:function(o){if(0==o.todos.length)sessionStorage.removeItem("scrollPosition"),$(".notYet").css("display","none"),$("#inputTitle").attr("placeholder","Submit your first todo"),changeQuote(0,0);else{for(var e=0,t=0;t<o.todos.length;t++)1==o.todos[t].completed&&e++;$(".notYet").css("display","block"),$("#inputTitle").attr("placeholder",""),changeQuote(1,o.todos.length-e)}var s="",i="",n="",a="";for(t=0;t<o.todos.length;t++){i=o.todos[t]._id.toString(),n=o.todos[t].text.toString(),a=o.todos[t].description;var l="",d="",c=o.todos[t].text;50<o.todos[t].text.length&&(c=o.todos[t].text.substr(0,50)+"..."),o.todos[t].completed?(l="Completed",d="Completed At: "+o.todos[t].completedAt.substr(12,8)):l="Not completed",s+='<div class="container todoContainer" onclick="addIdToArray(`'+o.todos[t]._id+'`)">\n    \n     <div class="row">\n      <div class="col-sm-9">\n<div class="row">\n<div class="col-sm-12">\n<h3 class="title">'+c+'</h3>\n    </div>\n</div>\n <div class="row">\n      \n <div class="col-sm-6"><p class="status">'+l+'</p></div>\n <div class="col-sm-6"><p class="finished">'+d+'</p> </div>\n  </div>\n        </div>\n    <div class="col-sm-3" style="height: 105px;"> \n    <div class="col-sm-4 todoBtnCol">\n <button class="btn todoBtn" title="Update Todo" onclick="openModal(`'+n+"`, `"+a+"`, "+o.todos[t].completed+",`"+i+"`,`"+o.todos[t].completedAt+"`, "+t+", `"+o.todos[t].createdAt+'`)"><i class="fa fa-pencil" aria-hidden="true"></i></button>\n </div>\n <div class="col-sm-4 todoBtnCol">\n \n <div class="outer" title="Complete Todo" onclick=\'completeTodo('+o.todos[t].completed+",`"+i+"`, "+t+')\'>\n <div class="switch"></div>\n </div>\n  </div>        \n<div class="col-sm-4 todoBtnCol">\n   <button class="btn todoBtn" title="Remove Todo" id="removeTodoBtn" onclick="deleteTodo(`'+i+'`)"><i class="fa fa-times" aria-hidden="true"></i></button>\n         </div>\n    </div>\n         \n      </div>\n </div>'}$("#listOfTodos").append(s);for(t=0;t<o.todos.length;t++)o.todos[t].completed?($(".switch:eq("+t+")").addClass("move"),$(".title:eq("+t+")").css({"text-decoration":"line-through"})):$(".switch:eq("+t+")").removeClass("move");(addDarkSelect=$(".todoContainer")).on("click",function(){$(this).toggleClass("darkSelect")}),$(".outer, .todoBtn").click(function(){var o=$(window).scrollTop();sessionStorage.setItem("scrollPosition",o)})}})}function submit(){var o=$("#inputTitle").val();if(""==o)return $("#submitTodoError").show(),void $("#submitTodoError").text("Please insert text to submit todo.");if(200<o.length)return $("#submitTodoError").show(),void $("#submitTodoError").text("Please keep todo title no longer than 200 characters.");var e={text:o};$.ajax({type:"POST",url:"/todos",contentType:"application/json",dataType:"json",data:JSON.stringify(e),success:function(o){location.reload()}})}function clearSubmitTodoError(){$("#submitTodoError").hide()}function deleteTodo(o){$.ajax({url:"/todos/"+o,type:"DELETE",success:function(){location.reload()}})}function deleteAllTodos(){sessionStorage.removeItem("scrollPosition"),$.ajax({url:"/todos",type:"DELETE",success:function(){}}),window.location.reload()}function completeTodo(o,e,t){o?(o=!1,$(".switch:eq("+t+")").removeClass("move")):(o=!0,$(".switch:eq("+t+")").addClass("move"));var s={completed:o};$.ajax({url:"/todos/"+e,data:JSON.stringify(s),type:"PATCH",contentType:"application/json",processData:!1,dataType:"json",success:function(o){location.reload()}})}function updateTodo(o,e,t,s,i,n){var a=0;o=(o=(o=$("#todoTitleInModal").val()).replace(/"/g,"'")).trim(),e=(e=(e=$("textarea").val()).replace(/"/g,"'")).trim(),""==o?($("#todoTitleInModalError").css("display","block"),$("#todoTitleInModalError").text("Title must have at least one character"),a++):200<o.length&&($("#todoTitleInModalError").show(),$("#todoTitleInModalError").text("Exceeded maximum number of characters (200)"),a++),2e3<e.length&&($("#textareaError").show(),$("#textareaError").text("Exceeded maximum number of characters (2000)"),a++);var l={text:o,description:e,completed:t,someNew:n};i&&0==a&&$.ajax({url:"/todos/"+s,data:JSON.stringify(l),type:"PATCH",contentType:"application/json",processData:!1,dataType:"json",success:function(o){$("#myModal").fadeOut(),location.reload()}})}$(document).ready(function(){null!=(scrollPosition=sessionStorage.getItem("scrollPosition"))&&$("html, body").animate({scrollTop:scrollPosition},100),startTime(),changeBackgroundImg(),getTodos(),limiting(),sorting(),displaying()});var data={},keepTheDate=null,newDate="";function combineValues(o,e,t,s,i,n,a){console.log("Modal finished is: "+n),"string"!=typeof n&&null!=keepTheDate?(keepTheDate=keepTheDate,console.log("AAAA")):"string"==typeof n?console.log("BBBB"):(keepTheDate=a,console.log("CCCC")),console.log("(1) "+keepTheDate),"string"==typeof o&&(data.text=o,keepTheDate=$(".switchModal").hasClass("moveModal")?(data.completed=!0,keepTheDate):(data.completed=!1,null),!0,console.log("(2) "+keepTheDate)),"number"==typeof o&&(data.completed=t,!1,keepTheDate=t?n:null,console.log("(3) "+keepTheDate))}var modalStatus="",modalFinished="",toggleCounter=0,toggleValue=[];function completeInModal(o,e,t,s,i,n,a){toggleValue[a]=0==toggleCounter?!t:!toggleValue[a];var l=(new Date).toString();l=l.substr(4,20),modalFinished=l,toggleValue[a]?($(".switchModal").addClass("moveModal"),modalStatus="Completed",$("#modalFinished").text(modalFinished)):(modalStatus="Not Completed",$(".switchModal").removeClass("moveModal"),$("#modalFinished").html('<i class="fa fa-question-circle" style="font-size:24px"></i>')),$("#modalStatus").text(modalStatus),toggleCounter++,combineValues(o,e,toggleValue[a],s,i,modalFinished,n)}function openModal(o,e,t,s,i,n,a){modal.style.display="flex",modalFinished=i,modalStatus=t?"Completed":"Not Completed";var l='\n<p class="closeModal" onclick="closeModal(47, '+t+",`"+s+'`, false)">&times</p>\n          \n<h3 class="modalTitle" style="text-align: center;\ndisplay: block;\nmargin: 0 auto;\nwidth: 100%; margin-top: 10px;">Update Todo</h3>\n';$(".modal-header").html(l),mb='<div class="modalPause">  \n<h5 class="pauseDesc">NAME</h5>\n<div class="container bg-3 text-center" style="width: 768px;">\n<div class="row">\n<div class="col-sm-3"> </div>\n<div class="col-sm-6">\n<input id="todoTitleInModal" oninput="oninputTodoTitleInModal()" autofocus style="width: 100%; background: #FFF; border: 2px solid #CCC; color: #000; margin-top: 4px;" />\n<p id="todoTitleInModalError"></p>\n    </div>\n   \n<div class="col-sm-3"> </div>\n        </div>\n</div>  \n </div>  ',mb+='<div class="modalPause">  \n<h5 class="pauseDesc">DESCRIPTION</h5>\n<div class="container bg-3 text-center" style="width: 768px;">\n<div class="row">\n<div class="col-sm-3"> </div>\n<div class="col-sm-6">\n<textarea id="textarea" placeholder="Optional" oninput="oninputTextarea()" rows=5 style="width: 100%; background: #FFF; border: 2px solid #CCC; color: #000; margin-top: 4px; resize: none;"></textarea>\n<p id="textareaError"></p>\n    </div>\n   \n<div class="col-sm-3"> </div>\n        </div>\n</div>  \n </div>  ',mb+=' \n <div class="modalPause">  \n<h5 class="pauseDesc">DETAILS</h5>\n<div class="container bg-3 text-center" style="width: 768px; height: 85px; padding-bottom: 0px; margin-top: 10px;">\n<div class="row">\n<div class="col-sm-3"></div>\n<div class="col-sm-2">\n<p>Status:</p>\n</div>\n<div class="col-sm-2">\n<p id="modalStatus">'+modalStatus+'</p>\n</div>\n<div class="col-sm-2">\n<div class="outerModal" title="Complete Todo" id="toggleBtn" onclick="completeInModal(47, `'+e+"` , "+t+",`"+s+"`, 'noRefresh', `"+i+"`, "+n+')" style="margin: 0 auto; text-align: center">\n<div class="switchModal"></div>\n</div>\n    \n<div class="col-sm-3"></div>\n    </div>\n</div>\n<div class="row" style="padding-top: 15px;">\n<div class="col-sm-3"></div>\n<div class="col-sm-2">\n<p id="completeAtPar">Created   Completed:</p>\n</div>\n<div class="col-sm-2">\n<p class="modalDetails">'+a+'</p>\n</div>\n<div class="col-sm-2">\n<p class="modalDetails" id="modalFinished">'+modalFinished+'</p>\n</div>\n<div class="col-sm-3"></div>\n        </div>\n    </div>\n</div>\n',$(".modal-body").html(mb),t?(modalStatus="Completed",$(".switchModal").addClass("moveModal"),$("#modalFinished").text(modalFinished)):(modalStatus="Not Completed",$(".switchModal").removeClass("moveModal"),$("#modalFinished").html('<i class="fa fa-question-circle" style="font-size:24px"></i>'));var d='<button id="cancelBtn" class="modalBtns" onclick="closeModal(47, '+t+",`"+s+'`, false)">Cancel</button>\n<button id="updateBtn" class="modalBtns" onclick="combineValues(`'+o+"`, `"+e+"`,"+t+",`"+s+"`, true, 4,`"+i+'`)">Update</button>';$(".modal-footer").html(d);var c=o;$("textarea").text(e),$("#todoTitleInModal").val(c)}var modal=document.getElementById("myModal");function closeModal(o,e,t,s){toggleCounter=0,$("#myModal").fadeOut(),combineValues(o,e,t,s)}function oninputTextarea(){$("#textareaError").hide()}function oninputTodoTitleInModal(){$("#todoTitleInModalError").hide()}function startTime(){var o=new Date,e=o.getHours(),t=o.getMinutes(),s=o.getSeconds();t=checkTime(t),s=checkTime(s),e<10&&(e="0"+e),$("#clockTitle").html(e+":"+t+":"+s);setTimeout(startTime,500)}function checkTime(o){return o<10&&(o="0"+o),o}var quotesArray=['"A journey of a thousand miles begins with a single step."\n    – Lao Tzu','"The only impossible journey is the one you never begin."\n    – Tony Robbins','"We are what we repeatedly do. Excellence, then, is not an act but a habit."\n    – Aristotle','"Don’t judge each day by the harvest you reap, but by the seeds that you plant."\n    – Robert Louis Stevenson','"Writing is an exploration. You start from nothing and learn as you go."\n    - E. L. Doctorow','"Adapt what is useful, reject what is useless, and add what is specifically your own."\n    - Bruce Lee'],questionsArray=["What's next on your mind?","What's your plan for today?","What do you want to do next?","What is your main focus today?","What's next on your list?"],arrayOfBackgrounds=["../Resources/img/cover/cloudscity.jpeg","../Resources/img/cover/apple.jpeg","../Resources/img/cover/beachananas.jpeg","../Resources/img/cover/beachcity.jpeg","../Resources/img/cover/bike.jpeg","../Resources/img/cover/bulb.jpeg","../Resources/img/cover/boat.jpg","../Resources/img/cover/bottle.jpeg","../Resources/img/cover/cherries.jpeg","../Resources/img/cover/chess.jpeg","../Resources/img/cover/clouds.jpeg","../Resources/img/cover/ferrari.jpeg","../Resources/img/cover/forestroad.jpg","../Resources/img/cover/glasses.jpeg","../Resources/img/cover/guitar.jpg","../Resources/img/cover/headphones.jpeg","../Resources/img/cover/highway.jpeg","../Resources/img/cover/home.jpeg","../Resources/img/cover/jetengine.jpg","../Resources/img/cover/kitten.jpeg","../Resources/img/cover/logs.jpeg","../Resources/img/cover/match.jpg","../Resources/img/cover/parkedinwild.jpeg","../Resources/img/cover/road.jpeg","../Resources/img/cover/rope.jpeg","../Resources/img/cover/sandals.jpeg","../Resources/img/cover/searocks.jpeg","../Resources/img/cover/skynight.jpeg","../Resources/img/cover/thunder.jpeg","../Resources/img/cover/underwater.jpeg","../Resources/img/cover/wing.jpeg","../Resources/img/cover/wolves.jpeg"];function changeQuote(o,e){var t="";0==o?($("#questionsTitle").css("display","none"),$("#quoteTitle").css("display","block"),t=quotesArray[Math.floor(Math.random()*quotesArray.length)],$("#quoteTitle").text(t)):(0==e?$("#quoteTitle").text("You have no unfinished todos"):1==e?$("#quoteTitle").text("You have "+e+" unfinished todo below"):$("#quoteTitle").text("You have "+e+" unfinished todos below"),$("#questionsTitle").css("display","block"),t=questionsArray[Math.floor(Math.random()*questionsArray.length)],$("#questionsTitle").text(t))}function changeBackgroundImg(){var o=(new Date).getDate();$("#openingDiv").fadeTo(500,.5,function(){$(this).css({background:"url('"+arrayOfBackgrounds[o]+"')","background-attachment":"fixed",overflow:"hidden","background-position":"center","background-repeat":"no-repeat","background-size":"cover","-webkit-background-size":"cover","-moz-background-size":"cover","-o-background-size":"cover"})}).fadeTo(500,1)}function limiting(){var t="";["No limit",1,3,5,10,15,20].forEach(function(o,e){t+='\n      <label class="radio">\n      <input class="limitRadio"  name="limit" type="radio">\n      <span style="font-weight: 100; text-align: center;">'+o+"</span>\n      </label>\n    "}),$("#limitUl").append(t),$(".limitRadio:eq(0)").attr("checked",!0),$(".limitRadio").click(function(){limit=(limit=$(this).parent(".radio").text()).trim(),search()})}function sorting(){$(".sortRadio").click(function(){sort=(sort=$(this).parent(".radio").text()).trim(),search()})}function displaying(){var t="";["All","Completed","Not completed"].forEach(function(o,e){t+='\n      <label class="radio">\n                <input class="displayRadio" name="display" type="radio">\n                <span style="font-weight: 100; text-align: center;">'+o+"</span>\n              </label>\n      "}),$("#displayUl").append(t),$(".displayRadio:eq(0)").attr("checked",!0),$(".displayRadio").click(function(){"Not completed"==(display=(display=$(this).parent(".radio").text()).trim())?($(".sortCompleted").attr("disabled",!0),$(".labelCompleted").css({cursor:"default"}),$(".labelCompleted").hover(function(){$(this).css("background","#222")})):($(".sortCompleted").attr("disabled",!1),$(".labelCompleted").css({cursor:"pointer"}),$(".labelCompleted").on("mouseenter",function(){$(this).css("background","#007BFF")}),$(".labelCompleted").on("mouseleave",function(){$(this).css("background","#222")})),search()})}function search(){idsArr=[];var o=$(".searchTodosForm").val();""==o&&(o="."),$.ajax({type:"GET",url:"/todos/"+o+"/"+display+"/"+limit+"/"+sort+"/",success:function(o){for(var e="",t="",s="",i="",n=0;n<o.todos.length;n++){t=o.todos[n]._id.toString(),s=o.todos[n].text.toString(),i=o.todos[n].description;var a="",l="",d=o.todos[n].text;50<o.todos[n].text.length&&(d=o.todos[n].text.substr(0,50)+"..."),o.todos[n].completed?(a="Completed",l="Completed At: "+o.todos[n].completedAt.substr(12,8)):a="Not completed",e+='<div class="container todoContainer" onclick="addIdToArray(`'+o.todos[n]._id+'`)">\n                \n                 <div class="row">\n                  <div class="col-sm-9">\n            <div class="row">\n            <div class="col-sm-12">\n            <h3 class="title">'+d+'</h3>\n                </div>\n            </div>\n             <div class="row">\n                  \n             <div class="col-sm-6"><p class="status">'+a+'</p></div>\n             <div class="col-sm-6"><p class="finished">'+l+'</p> </div>\n              </div>\n                    </div>\n                <div class="col-sm-3" style="height: 105px;"> \n                <div class="col-sm-4 todoBtnCol">\n             <button class="btn todoBtn" title="Update Todo" onclick="openModal(`'+s+"`, `"+i+"`, "+o.todos[n].completed+",`"+t+"`,`"+o.todos[n].completedAt+"`, "+n+", `"+o.todos[n].createdAt+'`)"><i class="fa fa-pencil" aria-hidden="true"></i></button>\n             </div>\n             <div class="col-sm-4 todoBtnCol">\n             \n             <div class="outer" title="Complete Todo" onclick=\'completeTodo('+o.todos[n].completed+",`"+t+"`, "+n+')\'>\n             <div class="switch"></div>\n             </div>\n              </div>        \n            <div class="col-sm-4 todoBtnCol">\n               <button class="btn todoBtn" title="Remove Todo" id="removeTodoBtn" onclick="deleteTodo(`'+t+'`)"><i class="fa fa-times" aria-hidden="true"></i></button>\n                     </div>\n                </div>\n                     \n                  </div>\n             </div>'}$(".todoContainer").remove(),$("#listOfTodos").append(e),(addDarkSelect=$(".todoContainer")).on("click",function(){$(this).toggleClass("darkSelect")});for(n=0;n<o.todos.length;n++)o.todos[n].completed?($(".switch:eq("+n+")").addClass("move"),$(".title:eq("+n+")").css({"text-decoration":"line-through"})):$(".switch:eq("+n+")").removeClass("move")}})}$("#scrollDown").click(function(){$("html, body").animate({scrollTop:$("#containerBg").offset().top},1e3)}),$(".navbarLi").on("mouseenter",function(){$(this).find(".innerUl").fadeIn()}),$(".navbarLi").on("mouseleave",function(){$(this).find(".innerUl").fadeOut()}),$("#inputTitle").keyup(function(o){13==o.keyCode&&submit()}),$(".searchTodosForm").keyup(function(o){13==o.keyCode&&search()});var addIdToArray=function(e){idsArr.includes(e)?idsArr.splice(idsArr.findIndex(function(o){return o==e})):idsArr.push(e),console.log(idsArr)};function KeyPressCheck(o){44==o.keyCode&&addDarkSelect.hasClass("darkSelect")&&$.ajax({url:"/todos/"+idsArr,type:"DELETE",success:function(){location.reload()}})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
