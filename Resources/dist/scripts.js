"use strict";var limit="No limit",display="Display all",sort="Date created";$(window).scroll(function(){$("#info").offset().top+50+$("#info").outerHeight()-$(window).height()<=$(this).scrollTop()?$("#scrollBack").fadeIn():$("#scrollBack").fadeOut()}),$("#scrollBack").click(function(){$("html, body").animate({scrollTop:0},1e3)});var scrollPosition="",addDarkSelect=void 0,idsArr=[];function getTodos(){$.ajax({type:"GET",url:"/todos",success:function(o){if(0==o.todos.length)sessionStorage.removeItem("scrollPosition"),$(".notYet").css("display","none"),$("#inputTitle").attr("placeholder","Submit your first todo"),changeQuote(0,0);else{for(var e=0,t=0;t<o.todos.length;t++)1==o.todos[t].completed&&e++;$(".notYet").css("display","block"),$("#inputTitle").attr("placeholder",""),changeQuote(1,o.todos.length-e)}var s="",i="",a="",n="";for(t=0;t<o.todos.length;t++){i=o.todos[t]._id.toString(),a=o.todos[t].text.toString(),n=o.todos[t].description;var l="",d="",c=o.todos[t].text;50<o.todos[t].text.length&&(c=o.todos[t].text.substr(0,50)+"..."),o.todos[t].completed?(l="Completed",d="Completed At: "+o.todos[t].completedAt.substr(12,8)):l="Not completed",s+='<div class="container todoContainer" onclick="addIdToArray(`'+o.todos[t]._id+'`)">\n    \n     <div class="row">\n      <div class="col-sm-9">\n<div class="row">\n<div class="col-sm-12">\n<h3 class="title">'+c+'</h3>\n    </div>\n</div>\n <div class="row">\n      \n <div class="col-sm-6"><p class="status">'+l+'</p></div>\n <div class="col-sm-6"><p class="finished">'+d+'</p> </div>\n  </div>\n        </div>\n    <div class="col-sm-3" style="height: 105px;"> \n    <div class="col-sm-4 todoBtnCol">\n <button class="btn todoBtn" title="Update Todo" onclick="openModal(`'+a+"`, `"+n+"`, "+o.todos[t].completed+",`"+i+"`,`"+o.todos[t].completedAt+"`, "+t+", `"+o.todos[t].createdAt+'`)"><i class="fa fa-pencil" aria-hidden="true"></i></button>\n </div>\n <div class="col-sm-4 todoBtnCol">\n \n <div class="outer" title="Complete Todo" onclick=\'completeTodo('+o.todos[t].completed+",`"+i+"`, "+t+')\'>\n <div class="switch"></div>\n </div>\n  </div>        \n<div class="col-sm-4 todoBtnCol">\n   <button class="btn todoBtn" title="Remove Todo" id="removeTodoBtn" onclick="deleteTodo(`'+i+'`)"><i class="fa fa-times" aria-hidden="true"></i></button>\n         </div>\n    </div>\n         \n      </div>\n </div>'}$("#listOfTodos").append(s);for(t=0;t<o.todos.length;t++)o.todos[t].completed?($(".switch:eq("+t+")").addClass("move"),$(".title:eq("+t+")").css({"text-decoration":"line-through"})):$(".switch:eq("+t+")").removeClass("move");(addDarkSelect=$(".todoContainer")).on("click",function(){$(this).toggleClass("darkSelect")}),$(".outer, .todoBtn").click(function(){var o=$(window).scrollTop();sessionStorage.setItem("scrollPosition",o)})}})}function submit(){var o=$("#inputTitle").val();if(""==o)return $("#submitTodoError").show(),void $("#submitTodoError").text("Please insert text to submit todo.");if(200<o.length)return $("#submitTodoError").show(),void $("#submitTodoError").text("Please keep todo title no longer than 200 characters.");var e={text:o};$.ajax({type:"POST",url:"/todos",contentType:"application/json",dataType:"json",data:JSON.stringify(e),success:function(o){location.reload()}})}function clearSubmitTodoError(){$("#submitTodoError").hide()}function deleteTodo(o){$.ajax({url:"/todos/"+o,type:"DELETE",success:function(){location.reload()}})}function deleteAllTodos(){sessionStorage.removeItem("scrollPosition"),$.ajax({url:"/todos",type:"DELETE",success:function(){}}),window.location.reload()}function completeTodo(o,e,t){var s="";if(o)o=!1,$(".switch:eq("+t+")").removeClass("move"),s=null;else{o=!0,$(".switch:eq("+t+")").addClass("move");var i=(new Date).toString();s=i=i.substr(4,20)}var a={completed:o,completedAt:s};$.ajax({url:"/todos/"+e,data:JSON.stringify(a),type:"PATCH",contentType:"application/json",processData:!1,dataType:"json",success:function(o){location.reload()}})}function updateTodo(o,e,t,s,i,a){var n=0;o=(o=(o=$("#todoTitleInModal").val()).replace(/"/g,"'")).trim(),e=(e=(e=$("textarea").val()).replace(/"/g,"'")).trim(),""==o?($("#todoTitleInModalError").css("display","block"),$("#todoTitleInModalError").text("Title must have at least one character"),n++):200<o.length&&($("#todoTitleInModalError").show(),$("#todoTitleInModalError").text("Exceeded maximum number of characters (200)"),n++),2e3<e.length&&($("#textareaError").show(),$("#textareaError").text("Exceeded maximum number of characters (2000)"),n++);var l={text:o,description:e,completed:t,completedAt:a};i&&0==n&&$.ajax({url:"/todos/"+s,data:JSON.stringify(l),type:"PATCH",contentType:"application/json",processData:!1,dataType:"json",success:function(o){$("#myModal").fadeOut(),location.reload()}})}$(document).ready(function(){null!=(scrollPosition=sessionStorage.getItem("scrollPosition"))&&$("html, body").animate({scrollTop:scrollPosition},100),startTime(),changeBackgroundImg(),getTodos(),limiting(),sorting(),displaying()});var data={},keepTheDate=null,newDate="";function combineValues(o,e,t,s,i,a,n){"string"!=typeof a&&null!=keepTheDate?keepTheDate=keepTheDate:"string"==typeof a||(keepTheDate=n),"string"==typeof o&&(data.text=o,keepTheDate=$(".switchModal").hasClass("moveModal")?(data.completed=!0,keepTheDate):(data.completed=!1,null),i=!0),"number"==typeof o&&(data.completed=t,i=!1,keepTheDate=t?a:null),updateTodo(data.text,e,data.completed,s,i,keepTheDate)}var modalStatus="",modalFinished="",toggleCounter=0,toggleValue=[];function completeInModal(o,e,t,s,i,a,n){toggleValue[n]=0==toggleCounter?!t:!toggleValue[n];var l=(new Date).toString();l=l.substr(4,20),modalFinished=l,toggleValue[n]?($(".switchModal").addClass("moveModal"),modalStatus="Completed",$("#modalFinished").text(modalFinished)):(modalStatus="Not Completed",$(".switchModal").removeClass("moveModal"),$("#modalFinished").html('<i class="fa fa-question-circle" style="font-size:24px"></i>')),$("#modalStatus").text(modalStatus),toggleCounter++,combineValues(o,e,toggleValue[n],s,i,modalFinished,a)}function openModal(o,e,t,s,i,a,n){modal.style.display="flex",modalFinished=i,modalStatus=t?"Completed":"Not Completed";var l='\n<p class="closeModal" onclick="closeModal(47, '+t+",`"+s+'`, false)">&times</p>\n          \n<h3 class="modalTitle" style="text-align: center;\ndisplay: block;\nmargin: 0 auto;\nwidth: 100%; margin-top: 10px;">Update Todo</h3>\n';$(".modal-header").html(l),mb='<div class="modalPause">  \n<h5 class="pauseDesc">NAME</h5>\n<div class="container bg-3 text-center" style="width: 768px;">\n<div class="row">\n<div class="col-sm-3"> </div>\n<div class="col-sm-6">\n<input id="todoTitleInModal" oninput="oninputTodoTitleInModal()" autofocus style="width: 100%; background: #FFF; border: 2px solid #CCC; color: #000; margin-top: 4px;" />\n<p id="todoTitleInModalError"></p>\n    </div>\n   \n<div class="col-sm-3"> </div>\n        </div>\n</div>  \n </div>  ',mb+='<div class="modalPause">  \n<h5 class="pauseDesc">DESCRIPTION</h5>\n<div class="container bg-3 text-center" style="width: 768px;">\n<div class="row">\n<div class="col-sm-3"> </div>\n<div class="col-sm-6">\n<textarea id="textarea" placeholder="Optional" oninput="oninputTextarea()" rows=5 style="width: 100%; background: #FFF; border: 2px solid #CCC; color: #000; margin-top: 4px; resize: none;"></textarea>\n<p id="textareaError"></p>\n    </div>\n   \n<div class="col-sm-3"> </div>\n        </div>\n</div>  \n </div>  ',mb+=' \n <div class="modalPause">  \n<h5 class="pauseDesc">DETAILS</h5>\n<div class="container bg-3 text-center" style="width: 768px; height: 85px; padding-bottom: 0px; margin-top: 10px;">\n<div class="row">\n<div class="col-sm-3"></div>\n<div class="col-sm-2">\n<p>Status:</p>\n</div>\n<div class="col-sm-2">\n<p id="modalStatus">'+modalStatus+'</p>\n</div>\n<div class="col-sm-2">\n<div class="outerModal" title="Complete Todo" id="toggleBtn" onclick="completeInModal(47, `'+e+"` , "+t+",`"+s+"`, 'noRefresh', `"+i+"`, "+a+')" style="margin: 0 auto; text-align: center">\n<div class="switchModal"></div>\n</div>\n    \n<div class="col-sm-3"></div>\n    </div>\n</div>\n<div class="row" style="padding-top: 15px;">\n<div class="col-sm-3"></div>\n<div class="col-sm-2">\n<p id="completeAtPar">Created   Completed:</p>\n</div>\n<div class="col-sm-2">\n<p class="modalDetails">'+n+'</p>\n</div>\n<div class="col-sm-2">\n<p class="modalDetails" id="modalFinished">'+modalFinished+'</p>\n</div>\n<div class="col-sm-3"></div>\n        </div>\n    </div>\n</div>\n',$(".modal-body").html(mb),t?(modalStatus="Completed",$(".switchModal").addClass("moveModal"),$("#modalFinished").text(modalFinished)):(modalStatus="Not Completed",$(".switchModal").removeClass("moveModal"),$("#modalFinished").html('<i class="fa fa-question-circle" style="font-size:24px"></i>'));var d='<button id="cancelBtn" class="modalBtns" onclick="closeModal(47, '+t+",`"+s+'`, false)">Cancel</button>\n<button id="updateBtn" class="modalBtns" onclick="combineValues(`'+o+"`, `"+e+"`,"+t+",`"+s+"`, true, 4,`"+i+'`)">Update</button>';$(".modal-footer").html(d);var c=o;$("textarea").text(e),$("#todoTitleInModal").val(c)}var modal=document.getElementById("myModal");function closeModal(o,e,t,s){toggleCounter=0,$("#myModal").fadeOut(),combineValues(o,e,t,s)}function oninputTextarea(){$("#textareaError").hide()}function oninputTodoTitleInModal(){$("#todoTitleInModalError").hide()}function startTime(){var o=new Date,e=o.getHours(),t=o.getMinutes(),s=o.getSeconds();t=checkTime(t),s=checkTime(s),e<10&&(e="0"+e),$("#clockTitle").html(e+":"+t+":"+s);setTimeout(startTime,500)}function checkTime(o){return o<10&&(o="0"+o),o}var quotesArray=['"A journey of a thousand miles begins with a single step."\n    – Lao Tzu','"The only impossible journey is the one you never begin."\n    – Tony Robbins','"We are what we repeatedly do. Excellence, then, is not an act but a habit."\n    – Aristotle','"Don’t judge each day by the harvest you reap, but by the seeds that you plant."\n    – Robert Louis Stevenson','"Writing is an exploration. You start from nothing and learn as you go."\n    - E. L. Doctorow','"Adapt what is useful, reject what is useless, and add what is specifically your own."\n    - Bruce Lee'],questionsArray=["What's next on your mind?","What's your plan for today?","What do you want to do next?","What is your main focus today?","What's next on your list?"],arrayOfBackgrounds=["../Resources/img/cover/cloudscity.jpeg","../Resources/img/cover/apple.jpeg","../Resources/img/cover/beachananas.jpeg","../Resources/img/cover/beachcity.jpeg","../Resources/img/cover/bike.jpeg","../Resources/img/cover/bulb.jpeg","../Resources/img/cover/boat.jpg","../Resources/img/cover/bottle.jpeg","../Resources/img/cover/cherries.jpeg","../Resources/img/cover/chess.jpeg","../Resources/img/cover/clouds.jpeg","../Resources/img/cover/ferrari.jpeg","../Resources/img/cover/forestroad.jpg","../Resources/img/cover/glasses.jpeg","../Resources/img/cover/guitar.jpg","../Resources/img/cover/headphones.jpeg","../Resources/img/cover/highway.jpeg","../Resources/img/cover/home.jpeg","../Resources/img/cover/jetengine.jpg","../Resources/img/cover/kitten.jpeg","../Resources/img/cover/logs.jpeg","../Resources/img/cover/match.jpg","../Resources/img/cover/parkedinwild.jpeg","../Resources/img/cover/road.jpeg","../Resources/img/cover/rope.jpeg","../Resources/img/cover/sandals.jpeg","../Resources/img/cover/searocks.jpeg","../Resources/img/cover/skynight.jpeg","../Resources/img/cover/thunder.jpeg","../Resources/img/cover/underwater.jpeg","../Resources/img/cover/wing.jpeg","../Resources/img/cover/wolves.jpeg"];function changeQuote(o,e){var t="";0==o?($("#questionsTitle").css("display","none"),$("#quoteTitle").css("display","block"),t=quotesArray[Math.floor(Math.random()*quotesArray.length)],$("#quoteTitle").text(t)):(0==e?$("#quoteTitle").text("You have no unfinished todos"):1==e?$("#quoteTitle").text("You have "+e+" unfinished todo below"):$("#quoteTitle").text("You have "+e+" unfinished todos below"),$("#questionsTitle").css("display","block"),t=questionsArray[Math.floor(Math.random()*questionsArray.length)],$("#questionsTitle").text(t))}function changeBackgroundImg(){var o=(new Date).getDate();$("#openingDiv").fadeTo(500,.5,function(){$(this).css({background:"url('"+arrayOfBackgrounds[o]+"')","background-attachment":"fixed",overflow:"hidden","background-position":"center","background-repeat":"no-repeat","background-size":"cover","-webkit-background-size":"cover","-moz-background-size":"cover","-o-background-size":"cover"})}).fadeTo(500,1)}function limiting(){var t="";["No limit",1,3,5,10,15,20].forEach(function(o,e){t+='\n      <label class="radio">\n      <input class="limitRadio"  name="limit" type="radio">\n      <span style="font-weight: 100; text-align: center;">'+o+"</span>\n      </label>\n    "}),$("#limitUl").append(t),$(".limitRadio:eq(0)").attr("checked",!0),$(".limitRadio").click(function(){limit=(limit=$(this).parent(".radio").text()).trim(),search()})}function sorting(){$(".sortRadio").click(function(){sort=(sort=$(this).parent(".radio").text()).trim(),search()})}function displaying(){var t="";["All","Completed","Not completed"].forEach(function(o,e){t+='\n      <label class="radio">\n                <input class="displayRadio" name="display" type="radio">\n                <span style="font-weight: 100; text-align: center;">'+o+"</span>\n              </label>\n      "}),$("#displayUl").append(t),$(".displayRadio:eq(0)").attr("checked",!0),$(".displayRadio").click(function(){"Not completed"==(display=(display=$(this).parent(".radio").text()).trim())?($(".sortCompleted").attr("disabled",!0),$(".labelCompleted").css({cursor:"default"}),$(".labelCompleted").hover(function(){$(this).css("background","#222")})):($(".sortCompleted").attr("disabled",!1),$(".labelCompleted").css({cursor:"pointer"}),$(".labelCompleted").on("mouseenter",function(){$(this).css("background","#007BFF")}),$(".labelCompleted").on("mouseleave",function(){$(this).css("background","#222")})),search()})}function search(){idsArr=[];var o=$(".searchTodosForm").val();""==o&&(o="."),$.ajax({type:"GET",url:"/todos/"+o+"/"+display+"/"+limit+"/"+sort+"/",success:function(o){for(var e="",t="",s="",i="",a=0;a<o.todos.length;a++){t=o.todos[a]._id.toString(),s=o.todos[a].text.toString(),i=o.todos[a].description;var n="",l="",d=o.todos[a].text;50<o.todos[a].text.length&&(d=o.todos[a].text.substr(0,50)+"..."),o.todos[a].completed?(n="Completed",l="Completed At: "+o.todos[a].completedAt.substr(12,8)):n="Not completed",e+='<div class="container todoContainer" onclick="addIdToArray(`'+o.todos[a]._id+'`)">\n                \n                 <div class="row">\n                  <div class="col-sm-9">\n            <div class="row">\n            <div class="col-sm-12">\n            <h3 class="title">'+d+'</h3>\n                </div>\n            </div>\n             <div class="row">\n                  \n             <div class="col-sm-6"><p class="status">'+n+'</p></div>\n             <div class="col-sm-6"><p class="finished">'+l+'</p> </div>\n              </div>\n                    </div>\n                <div class="col-sm-3" style="height: 105px;"> \n                <div class="col-sm-4 todoBtnCol">\n             <button class="btn todoBtn" title="Update Todo" onclick="openModal(`'+s+"`, `"+i+"`, "+o.todos[a].completed+",`"+t+"`,`"+o.todos[a].completedAt+"`, "+a+", `"+o.todos[a].createdAt+'`)"><i class="fa fa-pencil" aria-hidden="true"></i></button>\n             </div>\n             <div class="col-sm-4 todoBtnCol">\n             \n             <div class="outer" title="Complete Todo" onclick=\'completeTodo('+o.todos[a].completed+",`"+t+"`, "+a+')\'>\n             <div class="switch"></div>\n             </div>\n              </div>        \n            <div class="col-sm-4 todoBtnCol">\n               <button class="btn todoBtn" title="Remove Todo" id="removeTodoBtn" onclick="deleteTodo(`'+t+'`)"><i class="fa fa-times" aria-hidden="true"></i></button>\n                     </div>\n                </div>\n                     \n                  </div>\n             </div>'}$(".todoContainer").remove(),$("#listOfTodos").append(e),(addDarkSelect=$(".todoContainer")).on("click",function(){$(this).toggleClass("darkSelect")});for(a=0;a<o.todos.length;a++)o.todos[a].completed?($(".switch:eq("+a+")").addClass("move"),$(".title:eq("+a+")").css({"text-decoration":"line-through"})):$(".switch:eq("+a+")").removeClass("move")}})}$("#scrollDown").click(function(){$("html, body").animate({scrollTop:$("#containerBg").offset().top},1e3)}),$(".navbarLi").on("mouseenter",function(){$(this).find(".innerUl").fadeIn()}),$(".navbarLi").on("mouseleave",function(){$(this).find(".innerUl").fadeOut()}),$("#inputTitle").keyup(function(o){13==o.keyCode&&submit()}),$(".searchTodosForm").keyup(function(o){13==o.keyCode&&search()});var addIdToArray=function(e){idsArr.includes(e)?idsArr.splice(idsArr.findIndex(function(o){return o==e})):idsArr.push(e),console.log(idsArr)};function KeyPressCheck(o){44==o.keyCode&&addDarkSelect.hasClass("darkSelect")&&$.ajax({url:"/todos/"+idsArr,type:"DELETE",success:function(){location.reload()}})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsibGltaXQiLCJkaXNwbGF5Iiwid2luZG93Iiwic2Nyb2xsIiwiJCIsIm9mZnNldCIsInRvcCIsIm91dGVySGVpZ2h0IiwidGhpcyIsInNjcm9sbFRvcCIsImZhZGVJbiIsImNsaWNrIiwiYW5pbWF0ZSIsInNjcm9sbFBvc2l0aW9uIiwiYWRkRGFya1NlbGVjdCIsImlkc0FyciIsInVybCIsImFqYXgiLCJzZXNzaW9uU3RvcmFnZSIsImRhdGEiLCJ0b2RvcyIsImxlbmd0aCIsInJlbW92ZUl0ZW0iLCJjb21wbGV0ZWRUb2RvcyIsImF0dHIiLCJjaGFuZ2VRdW90ZSIsImkiLCJjb21wbGV0ZWQiLCJ0ZXh0IiwiZGVzY3JpcHRpb24iLCJpZCIsInNob3J0ZW5UaXRsZSIsIl9pZCIsInN0YXR1cyIsInN1YnN0ciIsImZpbmlzaGVkIiwiY29tcGxldGVkQXQiLCJjcmVhdGVkQXQiLCJhcHBlbmQiLCJsaXN0Iiwic2hvdyIsImFkZENsYXNzIiwiY3NzIiwidGV4dC1kZWNvcmF0aW9uIiwicmVtb3ZlQ2xhc3MiLCJvbiIsInRvZ2dsZUNsYXNzIiwiZGVsZXRlVG9kbyIsInNldEl0ZW0iLCJjdXJyZW50U2Nyb2xsUG9zaXRpb24iLCJ2YWwiLCJ0eXBlIiwic3VjY2VzcyIsInJlbG9hZCIsImxvY2F0aW9uIiwiaXNDb21wbGV0ZWQiLCJjb250ZW50VHlwZSIsImNsZWFyU3VibWl0VG9kb0Vycm9yIiwiaGlkZSIsImRhdGFUeXBlIiwiZXJyb3JDb3VudGVyIiwiY29tcGxldGVUb2RvIiwic29tZUlkIiwia2VlcFRoZURhdGUiLCJyZWZyZXNoIiwicHJvY2Vzc0RhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwibmV3RGF0ZSIsImNvbWJpbmVWYWx1ZXMiLCJ1cGRhdGVUb2RvIiwidHJpbSIsInJlcGxhY2UiLCJtb2RhbFN0YXR1cyIsIm1vZGFsRmluaXNoZWQiLCJ0b2dnbGVDb3VudGVyIiwidG9nZ2xlVmFsdWUiLCJzdHIiLCJmYWRlT3V0IiwiZG9jdW1lbnQiLCJyZWFkeSIsImdldEl0ZW0iLCJjaGFuZ2VCYWNrZ3JvdW5kSW1nIiwiZ2V0VG9kb3MiLCJzb3J0aW5nIiwiZGlzcGxheWluZyIsIm9wZW5Nb2RhbCIsIm1iIiwiaGFzQ2xhc3MiLCJjb21wbGV0ZUluTW9kYWwiLCJEYXRlIiwib25pbnB1dFRleHRhcmVhIiwiaHRtbCIsIm0iLCJ0Iiwic2V0VGltZW91dCIsInN0YXJ0VGltZSIsIm1vZGFsIiwic3R5bGUiLCJtaCIsInJhbmRvbVF1b3RlIiwicXVvdGVzQXJyYXkiLCJzb3J0Iiwic2VhcmNoIiwibWYiLCJ0ZXh0VmFsdWUiLCJnZXRFbGVtZW50QnlJZCIsInRvZGF5IiwiaCIsImZpbmQiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJzIiwiZ2V0U2Vjb25kcyIsImNoZWNrVGltZSIsInF1ZXN0aW9uc0FycmF5IiwiYXJyYXlPZkJhY2tncm91bmRzIiwic3VibWl0IiwiZXZlbnQiLCJudW0iLCJhZGRJZFRvQXJyYXkiLCJmbG9vciIsIk1hdGgiLCJyYW5kb20iLCJpbmRleCIsImdldERhdGUiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZC1hdHRhY2htZW50Iiwib3ZlcmZsb3ciLCJiYWNrZ3JvdW5kLXBvc2l0aW9uIiwiYmFja2dyb3VuZC1yZXBlYXQiLCJiYWNrZ3JvdW5kLXNpemUiLCItd2Via2l0LWJhY2tncm91bmQtc2l6ZSIsIi1tb3otYmFja2dyb3VuZC1zaXplIiwiLW8tYmFja2dyb3VuZC1zaXplIiwiZmFkZVRvIiwibGltaXRpbmciLCJhZGRMaW1pdCIsImZvckVhY2giLCJsaW0iLCJwYXJlbnQiLCJhZGREaXNwbGF5IiwiZGlzIiwiY3Vyc29yIiwiaG92ZXIiLCJ0b1N0cmluZyIsInJlbW92ZSIsImtleXVwIiwia2V5Q29kZSIsImluY2x1ZGVzIiwic3BsaWNlIiwiZmluZEluZGV4IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJLZXlQcmVzc0NoZWNrIl0sIm1hcHBpbmdzIjoiYUFHTSxJQUFJQSxNQUFRLFdB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IG9mIG5hdmJhckxpICovXHJcblxyXG4gICAgICBsZXQgbGltaXQgPSBcIk5vIGxpbWl0XCI7XHJcbiAgICAgIGxldCBkaXNwbGF5ID0gXCJEaXNwbGF5IGFsbFwiO1xyXG4gICAgICBsZXQgc29ydCA9ICdEYXRlIGNyZWF0ZWQnO1xyXG5cclxuXHJcbiAgICAgIC8qIFNjcm9sbGluZyBiYWNrICovXHJcblxyXG4gICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoVCA9ICQoJyNpbmZvJykub2Zmc2V0KCkudG9wICsgNTAsIC8vIHNpbmNlIC50b2RvQ29udGFpbmVyIGNhbiBiZSByZW1vdmVkXHJcbiAgICAgICAgICAgIGhIID0gJCgnI2luZm8nKS5vdXRlckhlaWdodCgpLCAvLyBJJ20gdXNpbmcgI2luZm8gKyA1MHB4IHNjb2xsZWQgZG93blxyXG4gICAgICAgICAgICB3SCA9ICQod2luZG93KS5oZWlnaHQoKSxcclxuICAgICAgICAgICAgd1MgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICBcclxuICAgICAgICBpZiAod1MgPj0gKGhUK2hILXdIKSl7XHJcbiAgICAgICAgICAkKFwiI3Njcm9sbEJhY2tcIikuZmFkZUluKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAkKFwiI3Njcm9sbEJhY2tcIikuZmFkZU91dCgpO1xyXG4gICAgICAgIH1cclxuICAgICB9KTtcclxuXHJcblxyXG4gICAgICQoXCIjc2Nyb2xsQmFja1wiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAkKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAwIH0sIDEwMDApO1xyXG4gICAgIH0pO1xyXG5cclxuICAgICAvKiBTY3JvbGxpbmcgdXNpbmcgc2Vzc2lvbiBzdG9yYWdlICovXHJcblxyXG4gICAgIGxldCBzY3JvbGxQb3NpdGlvbiA9ICcnO1xyXG5cclxuICAgICBsZXQgYWRkRGFya1NlbGVjdDtcclxuXHJcbiAgICAgbGV0IGlkc0FyciA9IFtdO1xyXG5cclxuICAgIFxyXG5cclxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICBzY3JvbGxQb3NpdGlvbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3Njcm9sbFBvc2l0aW9uJyk7XHJcblxyXG4gICAgIGlmIChzY3JvbGxQb3NpdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFBvc2l0aW9uXHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgICB9XHJcbiAgXHJcbiAgICBzdGFydFRpbWUoKTtcclxuICAgIGNoYW5nZUJhY2tncm91bmRJbWcoKTtcclxuICAgIGdldFRvZG9zKCk7XHJcblxyXG4gICAgbGltaXRpbmcoKTtcclxuICAgIHNvcnRpbmcoKTtcclxuICAgIGRpc3BsYXlpbmcoKTtcclxuXHJcbiAgXHJcbn0pO1xyXG5cclxuXHJcbi8qIEdFVCBUT0RPUyAqL1xyXG5cclxuZnVuY3Rpb24gZ2V0VG9kb3MoKSB7XHJcblxyXG5cclxuJC5hamF4KHtcclxuIHR5cGU6IFwiR0VUXCIsXHJcbiB1cmw6IFwiL3RvZG9zXCIsXHJcbiBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcblxyXG4gICAgaWYgKGRhdGEudG9kb3MubGVuZ3RoID09IDApIHtcclxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwic2Nyb2xsUG9zaXRpb25cIik7XHJcbiAgICAgICAgJChcIi5ub3RZZXRcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgJChcIiNpbnB1dFRpdGxlXCIpLmF0dHIoXCJwbGFjZWhvbGRlclwiLCBcIlN1Ym1pdCB5b3VyIGZpcnN0IHRvZG9cIik7XHJcbiAgICAgICAgY2hhbmdlUXVvdGUoMCwgMCk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbXBsZXRlZFRvZG9zID0gMDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLnRvZG9zLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS50b2Rvc1tpXS5jb21wbGV0ZWQgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGVkVG9kb3MrKztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICAkKFwiLm5vdFlldFwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICAgICAgICQoXCIjaW5wdXRUaXRsZVwiKS5hdHRyKFwicGxhY2Vob2xkZXJcIiwgXCJcIik7XHJcbiAgICAgICAgICBjaGFuZ2VRdW90ZSgxLCAoZGF0YS50b2Rvcy5sZW5ndGggLSBjb21wbGV0ZWRUb2RvcykpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG52YXIgbGlzdCA9ICcnO1xyXG52YXIgaWQgPSAnJztcclxudmFyIHRleHQgPSAnJztcclxudmFyIGRlc2NyaXB0aW9uID0gJyc7XHJcblxyXG5mb3IgKHZhciBpID0gMDsgaSA8IGRhdGEudG9kb3MubGVuZ3RoOyBpKyspIHtcclxuXHJcbmlkID0gZGF0YS50b2Rvc1tpXS5faWQudG9TdHJpbmcoKTtcclxudGV4dCA9IGRhdGEudG9kb3NbaV0udGV4dC50b1N0cmluZygpO1xyXG5kZXNjcmlwdGlvbiA9IGRhdGEudG9kb3NbaV0uZGVzY3JpcHRpb247XHJcblxyXG5sZXQgc3RhdHVzID0gJyc7XHJcbmxldCBmaW5pc2hlZCA9ICcnO1xyXG5cclxudmFyIHNob3J0ZW5UaXRsZSA9IGRhdGEudG9kb3NbaV0udGV4dDtcclxuXHJcbmlmIChkYXRhLnRvZG9zW2ldLnRleHQubGVuZ3RoID4gNTApIHtcclxuICAgIHNob3J0ZW5UaXRsZSA9IGRhdGEudG9kb3NbaV0udGV4dC5zdWJzdHIoMCw1MCkgKyBcIi4uLlwiO1xyXG59XHJcblxyXG5pZiAoZGF0YS50b2Rvc1tpXS5jb21wbGV0ZWQpIHtcclxuIHN0YXR1cyA9IFwiQ29tcGxldGVkXCI7XHJcbiBmaW5pc2hlZCA9IFwiQ29tcGxldGVkIEF0OiBcIiArIGRhdGEudG9kb3NbaV0uY29tcGxldGVkQXQuc3Vic3RyKDEyLDgpO1xyXG59XHJcbmVsc2Uge1xyXG4gc3RhdHVzID0gXCJOb3QgY29tcGxldGVkXCI7XHJcbn1cclxuXHJcbmxpc3QgKz0gYDxkaXYgY2xhc3M9XCJjb250YWluZXIgdG9kb0NvbnRhaW5lclwiIG9uY2xpY2s9XCJhZGRJZFRvQXJyYXkoXFxgYCArIGRhdGEudG9kb3NbaV0uX2lkICsgYFxcYClcIj5cclxuICAgIFxyXG4gICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+XHJcbjxkaXYgY2xhc3M9XCJyb3dcIj5cclxuPGRpdiBjbGFzcz1cImNvbC1zbS0xMlwiPlxyXG48aDMgY2xhc3M9XCJ0aXRsZVwiPiR7c2hvcnRlblRpdGxlfTwvaDM+XHJcbiAgICA8L2Rpdj5cclxuPC9kaXY+XHJcbiA8ZGl2IGNsYXNzPVwicm93XCI+XHJcbiAgICAgIFxyXG4gPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+PHAgY2xhc3M9XCJzdGF0dXNcIj4ke3N0YXR1c308L3A+PC9kaXY+XHJcbiA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj48cCBjbGFzcz1cImZpbmlzaGVkXCI+JHtmaW5pc2hlZH08L3A+IDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCIgc3R5bGU9XCJoZWlnaHQ6IDEwNXB4O1wiPiBcclxuICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNCB0b2RvQnRuQ29sXCI+XHJcbiA8YnV0dG9uIGNsYXNzPVwiYnRuIHRvZG9CdG5cIiB0aXRsZT1cIlVwZGF0ZSBUb2RvXCIgb25jbGljaz1cIm9wZW5Nb2RhbChcXGBgICsgdGV4dCArIGBcXGAsIFxcYGAgKyBkZXNjcmlwdGlvbiArIGBcXGAsICR7ZGF0YS50b2Rvc1tpXS5jb21wbGV0ZWR9LFxcYGAgKyBpZCArIGBcXGAsXFxgYCArIGRhdGEudG9kb3NbaV0uY29tcGxldGVkQXQgKyBgXFxgLCAke2l9LCBcXGBgICsgZGF0YS50b2Rvc1tpXS5jcmVhdGVkQXQgKyBgXFxgKVwiPjxpIGNsYXNzPVwiZmEgZmEtcGVuY2lsXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvYnV0dG9uPlxyXG4gPC9kaXY+XHJcbiA8ZGl2IGNsYXNzPVwiY29sLXNtLTQgdG9kb0J0bkNvbFwiPlxyXG4gXHJcbiA8ZGl2IGNsYXNzPVwib3V0ZXJcIiB0aXRsZT1cIkNvbXBsZXRlIFRvZG9cIiBvbmNsaWNrPSdjb21wbGV0ZVRvZG8oJHtkYXRhLnRvZG9zW2ldLmNvbXBsZXRlZH0sXFxgYCArIGlkICsgYFxcYCwgJHtpfSknPlxyXG4gPGRpdiBjbGFzcz1cInN3aXRjaFwiPjwvZGl2PlxyXG4gPC9kaXY+XHJcbiAgPC9kaXY+ICAgICAgICBcclxuPGRpdiBjbGFzcz1cImNvbC1zbS00IHRvZG9CdG5Db2xcIj5cclxuICAgPGJ1dHRvbiBjbGFzcz1cImJ0biB0b2RvQnRuXCIgdGl0bGU9XCJSZW1vdmUgVG9kb1wiIGlkPVwicmVtb3ZlVG9kb0J0blwiIG9uY2xpY2s9XCJkZWxldGVUb2RvKFxcYGAgKyBpZCArIGBcXGApXCI+PGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgICAgICAgXHJcbiAgICAgIDwvZGl2PlxyXG4gPC9kaXY+YDtcclxuIFxyXG59XHJcblxyXG4kKFwiI2xpc3RPZlRvZG9zXCIpLmFwcGVuZChsaXN0KTtcclxuXHJcbi8qIG9uY2UgdGV4dCBpcyBhZGRlZCB3ZSBjYW4gdG9nZ2xlIHRoZSBjbGFzcyB3aXRoIGNvdW50ZXIgZnJvbSBhbm90aGVyIGZvciBsb29wICovXHJcbmZvciAodmFyIGkgPSAwOyBpIDwgIGRhdGEudG9kb3MubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICBpZiAoZGF0YS50b2Rvc1tpXS5jb21wbGV0ZWQpIHtcclxuICAgICAgICAkKGAuc3dpdGNoOmVxKCR7aX0pYCkuYWRkQ2xhc3MoXCJtb3ZlXCIpO1xyXG4gICAgICAgICQoYC50aXRsZTplcSgke2l9KWApLmNzcyh7IFwidGV4dC1kZWNvcmF0aW9uXCI6IFwibGluZS10aHJvdWdoXCIgfSk7XHJcblxyXG4gICAgIH1cclxuICAgICBlbHNlIHtcclxuICAgICAgICAgJChgLnN3aXRjaDplcSgke2l9KWApLnJlbW92ZUNsYXNzKFwibW92ZVwiKTtcclxuICAgICB9XHJcbiAgICAgXHJcbn1cclxuXHJcblxyXG4gICAgICAgICAgICAvLyBHRVQgREFSS1NFTEVDVCBDTEFTU1xyXG5cclxuICAgICAgYWRkRGFya1NlbGVjdCA9ICAkKFwiLnRvZG9Db250YWluZXJcIik7XHJcbiAgICAgIFxyXG4gICAgICBhZGREYXJrU2VsZWN0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImRhcmtTZWxlY3RcIik7XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICAgIFxyXG5cclxuXHJcblxyXG4gICAgLyogU2Nyb2xsIHVzaW5nIHNlc3Npb24gc3RvcmFnZSAqLyBcclxuXHJcbiAgICAkKFwiLm91dGVyLCAudG9kb0J0blwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgY3VycmVudFNjcm9sbFBvc2l0aW9uID0gICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuICBcclxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdzY3JvbGxQb3NpdGlvbicsIGN1cnJlbnRTY3JvbGxQb3NpdGlvbik7XHJcbiAgICB9KTtcclxuXHJcbiB9XHJcblxyXG59KTtcclxuXHJcbn1cclxuXHJcblxyXG4vKiBQT1NUIFRPRE8gKi9cclxuIFxyXG5cclxuZnVuY3Rpb24gc3VibWl0KCkge1xyXG5cclxuIHZhciB0ZXh0ID0gJChcIiNpbnB1dFRpdGxlXCIpLnZhbCgpO1xyXG5cclxuIGlmICh0ZXh0ID09ICcnKSB7XHJcbiAgICAkKFwiI3N1Ym1pdFRvZG9FcnJvclwiKS5zaG93KCk7XHJcbiAgICAkKFwiI3N1Ym1pdFRvZG9FcnJvclwiKS50ZXh0KFwiUGxlYXNlIGluc2VydCB0ZXh0IHRvIHN1Ym1pdCB0b2RvLlwiKTtcclxuICAgIHJldHVybjtcclxuIH0gXHJcbiAgaWYgKHRleHQubGVuZ3RoID4gMjAwKSB7XHJcbiAgICAkKFwiI3N1Ym1pdFRvZG9FcnJvclwiKS5zaG93KCk7XHJcbiAgICAkKFwiI3N1Ym1pdFRvZG9FcnJvclwiKS50ZXh0KFwiUGxlYXNlIGtlZXAgdG9kbyB0aXRsZSBubyBsb25nZXIgdGhhbiAyMDAgY2hhcmFjdGVycy5cIik7XHJcbiAgICByZXR1cm47XHJcbiB9XHJcblxyXG52YXIgZGF0YSA9IHtcclxuIFwidGV4dFwiOiB0ZXh0XHJcbn1cclxuXHJcbiQuYWpheCh7XHJcbiB0eXBlOiBcIlBPU1RcIixcclxuIHVybDogXCIvdG9kb3NcIixcclxuIGNvbnRlbnRUeXBlIDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gZGF0YVR5cGUgOiAnanNvbicsXHJcbiBkYXRhIDogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiBcclxuICBsb2NhdGlvbi5yZWxvYWQoKTsgXHJcbiB9XHJcblxyXG59KTtcclxuXHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhclN1Ym1pdFRvZG9FcnJvcigpIHtcclxuICAgICQoXCIjc3VibWl0VG9kb0Vycm9yXCIpLmhpZGUoKTtcclxufVxyXG5cclxuXHJcblxyXG4vKiBERUxFVEUgVE9ETyAgICovXHJcblxyXG5mdW5jdGlvbiBkZWxldGVUb2RvKGlkKSB7XHJcblxyXG4gJC5hamF4KHtcclxuIHVybDogJy90b2Rvcy8nICsgaWQsXHJcbiB0eXBlOiAnREVMRVRFJyxcclxuIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xyXG4gbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5cclxuXHJcbi8qIERFTEVURSBBTEwgVE9ET1MgKi9cclxuXHJcbmZ1bmN0aW9uIGRlbGV0ZUFsbFRvZG9zKCkge1xyXG5cclxuIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJzY3JvbGxQb3NpdGlvblwiKTtcclxuXHJcbiAkLmFqYXgoe1xyXG4gdXJsOiAnL3RvZG9zJyxcclxuIHR5cGU6ICdERUxFVEUnLFxyXG4gc3VjY2VzczogZnVuY3Rpb24oKSB7XHJcbiB9XHJcblxyXG5cclxufSk7XHJcblxyXG53aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcblxyXG59XHJcblxyXG5cclxuLyogQ09NUExFVEUgVE9ETyAqL1xyXG5cclxuZnVuY3Rpb24gY29tcGxldGVUb2RvKGlzQ29tcGxldGVkLCBzb21lSWQsIGkpIHtcclxuXHJcbiAgIGxldCBjb21wbGV0ZWRBdCA9ICcnO1xyXG5cclxuIGlmIChpc0NvbXBsZXRlZCkge1xyXG4gICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgJChgLnN3aXRjaDplcSgke2l9KWApLnJlbW92ZUNsYXNzKFwibW92ZVwiKTtcclxuICAgICBjb21wbGV0ZWRBdCA9IG51bGw7XHJcblxyXG4gfSBlbHNlIHtcclxuICAgICBpc0NvbXBsZXRlZCA9IHRydWU7XHJcbiAgICAgJChgLnN3aXRjaDplcSgke2l9KWApLmFkZENsYXNzKFwibW92ZVwiKTtcclxuXHJcbiAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgIHZhciBzdHIgPSBkLnRvU3RyaW5nKCk7XHJcbiAgICAgc3RyID0gc3RyLnN1YnN0cig0LDIwKTtcclxuICAgICBjb21wbGV0ZWRBdCA9IHN0cjtcclxuXHJcbiB9XHJcblxyXG52YXIgZGF0YSA9IHtcclxuIGNvbXBsZXRlZDogaXNDb21wbGV0ZWQsXHJcbiBjb21wbGV0ZWRBdFxyXG59O1xyXG5cclxuXHJcbiQuYWpheCh7XHJcbnVybDogXCIvdG9kb3MvXCIgKyBzb21lSWQsXHJcbmRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG50eXBlOiAnUEFUQ0gnLFxyXG5jb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG5wcm9jZXNzRGF0YTogZmFsc2UsXHJcbmRhdGFUeXBlOiAnanNvbicsXHJcbnN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbmxvY2F0aW9uLnJlbG9hZCgpO1xyXG59XHJcblxyXG5cclxufSk7XHJcblxyXG59XHJcblxyXG5cclxuLyogVVBEQVRFIE9ORSBUT0RPICovXHJcblxyXG5mdW5jdGlvbiB1cGRhdGVUb2RvKHRleHQsIGRlc2NyaXB0aW9uLCBjb21wbGV0ZWQsIGlkLCByZWZyZXNoLCBrZWVwVGhlRGF0ZSkge1xyXG5cclxuICAgIHZhciBlcnJvckNvdW50ZXIgPSAwO1xyXG5cclxuICAgIHRleHQgPSAkKFwiI3RvZG9UaXRsZUluTW9kYWxcIikudmFsKCk7XHJcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cIi9nLCBcIidcIik7IFxyXG4gICAgdGV4dCA9IHRleHQudHJpbSgpOyBcclxuXHJcbiAgICBkZXNjcmlwdGlvbiA9ICQoXCJ0ZXh0YXJlYVwiKS52YWwoKTtcclxuICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZSgvXCIvZywgXCInXCIpOyBcclxuICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24udHJpbSgpOyBcclxuXHJcblxyXG4gICAgaWYgKHRleHQgPT0gJycpIHtcclxuICAgICAgICAkKFwiI3RvZG9UaXRsZUluTW9kYWxFcnJvclwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICAgICAgJChcIiN0b2RvVGl0bGVJbk1vZGFsRXJyb3JcIikudGV4dChcIlRpdGxlIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyXCIpO1xyXG4gICAgICAgIGVycm9yQ291bnRlcisrO1xyXG4gICAgfVxyXG5cclxuICAgIGVsc2UgaWYgKHRleHQubGVuZ3RoID4gMjAwKSB7XHJcbiAgICAgICAgJChcIiN0b2RvVGl0bGVJbk1vZGFsRXJyb3JcIikuc2hvdygpO1xyXG4gICAgICAgICQoXCIjdG9kb1RpdGxlSW5Nb2RhbEVycm9yXCIpLnRleHQoXCJFeGNlZWRlZCBtYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzICgyMDApXCIpO1xyXG4gICAgICAgIGVycm9yQ291bnRlcisrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkZXNjcmlwdGlvbi5sZW5ndGggPiAyMDAwKSB7XHJcbiAgICAgICAgJChcIiN0ZXh0YXJlYUVycm9yXCIpLnNob3coKTtcclxuICAgICAgICAkKFwiI3RleHRhcmVhRXJyb3JcIikudGV4dChcIkV4Y2VlZGVkIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgKDIwMDApXCIpO1xyXG4gICAgICAgIGVycm9yQ291bnRlcisrO1xyXG4gICAgfVxyXG5cclxudmFyIGRhdGEgPSB7XHJcbiAgICB0ZXh0LFxyXG4gICAgZGVzY3JpcHRpb24sXHJcbiAgICBjb21wbGV0ZWQsXHJcbiAgICBjb21wbGV0ZWRBdDoga2VlcFRoZURhdGVcclxufTtcclxuXHJcbmlmIChyZWZyZXNoICYmIGVycm9yQ291bnRlciA9PSAwKSB7XHJcblxyXG4kLmFqYXgoe1xyXG51cmw6IFwiL3RvZG9zL1wiICsgaWQsXHJcbmRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG50eXBlOiAnUEFUQ0gnLFxyXG5jb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG5wcm9jZXNzRGF0YTogZmFsc2UsXHJcbmRhdGFUeXBlOiAnanNvbicsXHJcbnN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4kKFwiI215TW9kYWxcIikuZmFkZU91dCgpO1xyXG5sb2NhdGlvbi5yZWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG52YXIgZGF0YSA9IHt9O1xyXG5cclxudmFyIGtlZXBUaGVEYXRlID0gbnVsbDtcclxudmFyIG5ld0RhdGUgPSAnJztcclxuXHJcbmZ1bmN0aW9uIGNvbWJpbmVWYWx1ZXModGV4dCwgZGVzY3JpcHRpb24sIGlzQ29tcGxldGVkLCBpZCwgcmVmcmVzaCwgbW9kYWxGaW5pc2hlZCwgY29tcGxldGVkQXQpIHsgXHJcblxyXG4gICBcclxuICAgICBpZiAodHlwZW9mKG1vZGFsRmluaXNoZWQpICE9ICdzdHJpbmcnICYmIGtlZXBUaGVEYXRlICE9IG51bGwpIHtcclxuICAgICAgICBrZWVwVGhlRGF0ZSA9IGtlZXBUaGVEYXRlO1xyXG4gICAgICAgIFxyXG4gICAgIH1cclxuICAgICAgICAgZWxzZSAgaWYgKHR5cGVvZihtb2RhbEZpbmlzaGVkKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAga2VlcFRoZURhdGUgPT0gbW9kYWxGaW5pc2hlZDtcclxuICAgICAgICAgXHJcbiAgICAgfSAgZWxzZSB7XHJcbiAgICAgICAgIGtlZXBUaGVEYXRlID0gY29tcGxldGVkQXQ7XHJcbiAgICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YodGV4dCkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgZGF0YS50ZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgaWYgKCAgJChcIi5zd2l0Y2hNb2RhbFwiKS5oYXNDbGFzcyhcIm1vdmVNb2RhbFwiKSApIHtcclxuICAgICAgICAgICAgZGF0YS5jb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBrZWVwVGhlRGF0ZSA9IGtlZXBUaGVEYXRlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhLmNvbXBsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBrZWVwVGhlRGF0ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgIFxyXG4gICAgICAgIHJlZnJlc2ggPSB0cnVlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mKHRleHQpID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgZGF0YS5jb21wbGV0ZWQgPSBpc0NvbXBsZXRlZDtcclxuICAgICAgICByZWZyZXNoID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChpc0NvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICBrZWVwVGhlRGF0ZSA9IG1vZGFsRmluaXNoZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAga2VlcFRoZURhdGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAgdXBkYXRlVG9kbyhkYXRhLnRleHQsIGRlc2NyaXB0aW9uLCBkYXRhLmNvbXBsZXRlZCwgaWQsIHJlZnJlc2gsIGtlZXBUaGVEYXRlKTtcclxuXHJcbn1cclxuXHJcbiAgXHJcbnZhciBtb2RhbFN0YXR1cyA9IFwiXCI7XHJcbnZhciBtb2RhbEZpbmlzaGVkID0gJyc7XHJcbnZhciB0b2dnbGVDb3VudGVyID0gMDtcclxudmFyIHRvZ2dsZVZhbHVlID0gW107XHJcblxyXG5mdW5jdGlvbiBjb21wbGV0ZUluTW9kYWwodGV4dCwgZGVzY3JpcHRpb24sIGlzQ29tcGxldGVkLCBpZCwgcmVmcmVzaCwgY29tcGxldGVkQXQsIGkpIHtcclxuXHJcbiAgICBpZiAodG9nZ2xlQ291bnRlciA9PSAwKSB7XHJcbiAgICAgICAgdG9nZ2xlVmFsdWVbaV0gPSAhaXNDb21wbGV0ZWQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdG9nZ2xlVmFsdWVbaV0gPSAhdG9nZ2xlVmFsdWVbaV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcclxuICAgICAgdmFyIHN0ciA9IGQudG9TdHJpbmcoKTtcclxuICAgICAgc3RyID0gc3RyLnN1YnN0cig0LDIwKTtcclxuICAgICAgbW9kYWxGaW5pc2hlZCA9IHN0cjtcclxuXHJcbiAgICAgIGlmICh0b2dnbGVWYWx1ZVtpXSkge1xyXG4gICAgICAgICQoXCIuc3dpdGNoTW9kYWxcIikuYWRkQ2xhc3MoXCJtb3ZlTW9kYWxcIik7XHJcbiAgICAgICAgbW9kYWxTdGF0dXMgPSBcIkNvbXBsZXRlZFwiO1xyXG4gICAgICAgICQoXCIjbW9kYWxGaW5pc2hlZFwiKS50ZXh0KG1vZGFsRmluaXNoZWQpO1xyXG4gIFxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIG1vZGFsU3RhdHVzID0gXCJOb3QgQ29tcGxldGVkXCI7XHJcbiAgICAgICAgJChcIi5zd2l0Y2hNb2RhbFwiKS5yZW1vdmVDbGFzcyhcIm1vdmVNb2RhbFwiKTtcclxuICAgICAgICAkKFwiI21vZGFsRmluaXNoZWRcIikuaHRtbCgnPGkgY2xhc3M9XCJmYSBmYS1xdWVzdGlvbi1jaXJjbGVcIiBzdHlsZT1cImZvbnQtc2l6ZToyNHB4XCI+PC9pPicpO1xyXG4gICAgICAgXHJcbiAgICAgIH1cclxuXHJcbiAgICAgJChcIiNtb2RhbFN0YXR1c1wiKS50ZXh0KG1vZGFsU3RhdHVzKTtcclxuXHJcbiAgICAgIFxyXG4gICAgIHRvZ2dsZUNvdW50ZXIrKztcclxuXHJcbiAgICAgY29tYmluZVZhbHVlcyh0ZXh0LCBkZXNjcmlwdGlvbiwgdG9nZ2xlVmFsdWVbaV0sIGlkLCByZWZyZXNoLCBtb2RhbEZpbmlzaGVkLCBjb21wbGV0ZWRBdCk7XHJcblxyXG59XHJcblxyXG5cclxuLyogTW9kYWwgKi9cclxuXHJcbi8vIE9wZW4gTW9kYWxcclxuXHJcbmZ1bmN0aW9uIG9wZW5Nb2RhbCh0ZXh0LCBkZXNjcmlwdGlvbiwgaXNDb21wbGV0ZWQsIGlkLCBjb21wbGV0ZWRBdCwgaSwgY3JlYXRlZEF0KSB7XHJcbiAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgXHJcbiAgICBtb2RhbEZpbmlzaGVkID0gY29tcGxldGVkQXQ7XHJcblxyXG4gICAgaWYgKGlzQ29tcGxldGVkKSB7XHJcbiAgICAgICAgbW9kYWxTdGF0dXMgPSBcIkNvbXBsZXRlZFwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbW9kYWxTdGF0dXMgPSBcIk5vdCBDb21wbGV0ZWRcIjsgXHJcbiAgICB9XHJcblxyXG5cclxuLy8gTW9kYWwgaGVhZGVyXHJcblxyXG52YXIgbWggPSBgXHJcbjxwIGNsYXNzPVwiY2xvc2VNb2RhbFwiIG9uY2xpY2s9XCJjbG9zZU1vZGFsKDQ3LCAke2lzQ29tcGxldGVkfSxcXGBgICsgaWQgKyBgXFxgLCBmYWxzZSlcIj4mdGltZXM8L3A+XHJcbiAgICAgICAgICBcclxuPGgzIGNsYXNzPVwibW9kYWxUaXRsZVwiIHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyO1xyXG5kaXNwbGF5OiBibG9jaztcclxubWFyZ2luOiAwIGF1dG87XHJcbndpZHRoOiAxMDAlOyBtYXJnaW4tdG9wOiAxMHB4O1wiPlVwZGF0ZSBUb2RvPC9oMz5cclxuYDtcclxuXHJcbiQoXCIubW9kYWwtaGVhZGVyXCIpLmh0bWwobWgpO1xyXG5cclxuXHJcbi8vIE1vZGFsIEJvZHkgLS0gTkFNRVxyXG5cclxubWIgPSBgPGRpdiBjbGFzcz1cIm1vZGFsUGF1c2VcIj4gIFxyXG48aDUgY2xhc3M9XCJwYXVzZURlc2NcIj5OQU1FPC9oNT5cclxuPGRpdiBjbGFzcz1cImNvbnRhaW5lciBiZy0zIHRleHQtY2VudGVyXCIgc3R5bGU9XCJ3aWR0aDogNzY4cHg7XCI+XHJcbjxkaXYgY2xhc3M9XCJyb3dcIj5cclxuPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+IDwvZGl2PlxyXG48ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cclxuPGlucHV0IGlkPVwidG9kb1RpdGxlSW5Nb2RhbFwiIG9uaW5wdXQ9XCJvbmlucHV0VG9kb1RpdGxlSW5Nb2RhbCgpXCIgYXV0b2ZvY3VzIHN0eWxlPVwid2lkdGg6IDEwMCU7IGJhY2tncm91bmQ6ICNGRkY7IGJvcmRlcjogMnB4IHNvbGlkICNDQ0M7IGNvbG9yOiAjMDAwOyBtYXJnaW4tdG9wOiA0cHg7XCIgLz5cclxuPHAgaWQ9XCJ0b2RvVGl0bGVJbk1vZGFsRXJyb3JcIj48L3A+XHJcbiAgICA8L2Rpdj5cclxuICAgXHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPiA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuPC9kaXY+ICBcclxuIDwvZGl2PiAgYDtcclxuXHJcblxyXG4vLyBNb2RhbCBCb2R5IC0tIERFU0NSSVBUSU9OXHJcblxyXG5tYiArPSBgPGRpdiBjbGFzcz1cIm1vZGFsUGF1c2VcIj4gIFxyXG48aDUgY2xhc3M9XCJwYXVzZURlc2NcIj5ERVNDUklQVElPTjwvaDU+XHJcbjxkaXYgY2xhc3M9XCJjb250YWluZXIgYmctMyB0ZXh0LWNlbnRlclwiIHN0eWxlPVwid2lkdGg6IDc2OHB4O1wiPlxyXG48ZGl2IGNsYXNzPVwicm93XCI+XHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPiA8L2Rpdj5cclxuPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XHJcbjx0ZXh0YXJlYSBpZD1cInRleHRhcmVhXCIgcGxhY2Vob2xkZXI9XCJPcHRpb25hbFwiIG9uaW5wdXQ9XCJvbmlucHV0VGV4dGFyZWEoKVwiIHJvd3M9NSBzdHlsZT1cIndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kOiAjRkZGOyBib3JkZXI6IDJweCBzb2xpZCAjQ0NDOyBjb2xvcjogIzAwMDsgbWFyZ2luLXRvcDogNHB4OyByZXNpemU6IG5vbmU7XCI+PC90ZXh0YXJlYT5cclxuPHAgaWQ9XCJ0ZXh0YXJlYUVycm9yXCI+PC9wPlxyXG4gICAgPC9kaXY+XHJcbiAgIFxyXG48ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj4gPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbjwvZGl2PiAgXHJcbiA8L2Rpdj4gIGA7XHJcblxyXG4gLy8gQm9keSBwYXJ0IDJcclxuXHJcbiBtYis9IGAgXHJcbiA8ZGl2IGNsYXNzPVwibW9kYWxQYXVzZVwiPiAgXHJcbjxoNSBjbGFzcz1cInBhdXNlRGVzY1wiPkRFVEFJTFM8L2g1PlxyXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyIGJnLTMgdGV4dC1jZW50ZXJcIiBzdHlsZT1cIndpZHRoOiA3NjhweDsgaGVpZ2h0OiA4NXB4OyBwYWRkaW5nLWJvdHRvbTogMHB4OyBtYXJnaW4tdG9wOiAxMHB4O1wiPlxyXG48ZGl2IGNsYXNzPVwicm93XCI+XHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwiY29sLXNtLTJcIj5cclxuPHA+U3RhdHVzOjwvcD5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tMlwiPlxyXG48cCBpZD1cIm1vZGFsU3RhdHVzXCI+JHttb2RhbFN0YXR1c308L3A+XHJcbjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwiY29sLXNtLTJcIj5cclxuPGRpdiBjbGFzcz1cIm91dGVyTW9kYWxcIiB0aXRsZT1cIkNvbXBsZXRlIFRvZG9cIiBpZD1cInRvZ2dsZUJ0blwiIG9uY2xpY2s9XCJjb21wbGV0ZUluTW9kYWwoNDcsIFxcYGAgKyBkZXNjcmlwdGlvbiArIGBcXGAgLCAke2lzQ29tcGxldGVkfSxcXGBgICsgaWQgKyBgXFxgLCAnbm9SZWZyZXNoJywgXFxgYCArIGNvbXBsZXRlZEF0ICsgYFxcYCwgJHtpfSlcIiBzdHlsZT1cIm1hcmdpbjogMCBhdXRvOyB0ZXh0LWFsaWduOiBjZW50ZXJcIj5cclxuPGRpdiBjbGFzcz1cInN3aXRjaE1vZGFsXCI+PC9kaXY+XHJcbjwvZGl2PlxyXG4gICAgXHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPjwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwicm93XCIgc3R5bGU9XCJwYWRkaW5nLXRvcDogMTVweDtcIj5cclxuPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+PC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tMlwiPlxyXG48cCBpZD1cImNvbXBsZXRlQXRQYXJcIj5DcmVhdGVkICAgQ29tcGxldGVkOjwvcD5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tMlwiPlxyXG48cCBjbGFzcz1cIm1vZGFsRGV0YWlsc1wiPiR7Y3JlYXRlZEF0fTwvcD5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJjb2wtc20tMlwiPlxyXG48cCBjbGFzcz1cIm1vZGFsRGV0YWlsc1wiIGlkPVwibW9kYWxGaW5pc2hlZFwiPiR7bW9kYWxGaW5pc2hlZH08L3A+XHJcbjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuYDtcclxuXHJcblxyXG5cclxuJChcIi5tb2RhbC1ib2R5XCIpLmh0bWwobWIpO1xyXG5cclxuaWYgKGlzQ29tcGxldGVkKSB7XHJcbiAgICBtb2RhbFN0YXR1cyA9IFwiQ29tcGxldGVkXCI7XHJcbiAgICAkKFwiLnN3aXRjaE1vZGFsXCIpLmFkZENsYXNzKFwibW92ZU1vZGFsXCIpO1xyXG4gICAgJChcIiNtb2RhbEZpbmlzaGVkXCIpLnRleHQobW9kYWxGaW5pc2hlZClcclxufSBlbHNlIHtcclxuICAgIG1vZGFsU3RhdHVzID0gXCJOb3QgQ29tcGxldGVkXCI7XHJcbiAgICAkKFwiLnN3aXRjaE1vZGFsXCIpLnJlbW92ZUNsYXNzKFwibW92ZU1vZGFsXCIpO1xyXG4gICAgJChcIiNtb2RhbEZpbmlzaGVkXCIpLmh0bWwoJzxpIGNsYXNzPVwiZmEgZmEtcXVlc3Rpb24tY2lyY2xlXCIgc3R5bGU9XCJmb250LXNpemU6MjRweFwiPjwvaT4nKTtcclxufVxyXG5cclxuXHJcbi8vIG1vZGFsIGZvb3RlclxyXG5cclxudmFyIG1mID0gYDxidXR0b24gaWQ9XCJjYW5jZWxCdG5cIiBjbGFzcz1cIm1vZGFsQnRuc1wiIG9uY2xpY2s9XCJjbG9zZU1vZGFsKDQ3LCAke2lzQ29tcGxldGVkfSxcXGBgICsgaWQgKyBgXFxgLCBmYWxzZSlcIj5DYW5jZWw8L2J1dHRvbj5cclxuPGJ1dHRvbiBpZD1cInVwZGF0ZUJ0blwiIGNsYXNzPVwibW9kYWxCdG5zXCIgb25jbGljaz1cImNvbWJpbmVWYWx1ZXMoXFxgYCArIHRleHQgKyBgXFxgLCBcXGBgICsgZGVzY3JpcHRpb24gKyBgXFxgLCR7aXNDb21wbGV0ZWR9LFxcYGAgKyBpZCArIGBcXGAsIHRydWUsIDQsXFxgYCArIGNvbXBsZXRlZEF0ICsgYFxcYClcIj5VcGRhdGU8L2J1dHRvbj5gOyBcclxuXHJcbiAgICAkKFwiLm1vZGFsLWZvb3RlclwiKS5odG1sKG1mKTtcclxuXHJcbiAgICB2YXIgdGV4dFZhbHVlID0gdGV4dDsgXHJcblxyXG4gICAgJChcInRleHRhcmVhXCIpLnRleHQoZGVzY3JpcHRpb24pO1xyXG4gICAgJChcIiN0b2RvVGl0bGVJbk1vZGFsXCIpLnZhbCh0ZXh0VmFsdWUpO1xyXG5cclxuICAgfVxyXG5cclxuICAgLy8gQ2xvc2UgTW9kYWxcclxuXHJcbiAgIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteU1vZGFsJyk7XHJcbiAgXHJcbiAgIGZ1bmN0aW9uIGNsb3NlTW9kYWwodGV4dCwgaXNDb21wbGV0ZWQsIGlkLCByZWZyZXNoKSB7XHJcbiAgICAgICB0b2dnbGVDb3VudGVyID0gMDtcclxuICAgICQoXCIjbXlNb2RhbFwiKS5mYWRlT3V0KCk7XHJcbiAgXHJcbiAgICBjb21iaW5lVmFsdWVzKHRleHQsIGlzQ29tcGxldGVkLCBpZCwgcmVmcmVzaCk7IFxyXG4gICB9XHJcblxyXG4gICBcclxuICAgLy8gb25pbnB1dCB0ZXh0YXJlYVxyXG5cclxuICAgZnVuY3Rpb24gb25pbnB1dFRleHRhcmVhKCkge1xyXG5cclxuICAgICQoXCIjdGV4dGFyZWFFcnJvclwiKS5oaWRlKCk7XHJcblxyXG4gICB9XHJcblxyXG4gICBmdW5jdGlvbiBvbmlucHV0VG9kb1RpdGxlSW5Nb2RhbCgpIHtcclxuXHJcbiAgICAkKFwiI3RvZG9UaXRsZUluTW9kYWxFcnJvclwiKS5oaWRlKCk7XHJcblxyXG4gICB9XHJcblxyXG5cclxuICAgLyogU3RhcnQgUGFnZSBTY3JpcHQgKi8gXHJcblxyXG4gICBmdW5jdGlvbiBzdGFydFRpbWUoKSB7XHJcbiAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgdmFyIGggPSB0b2RheS5nZXRIb3VycygpO1xyXG4gICAgdmFyIG0gPSB0b2RheS5nZXRNaW51dGVzKCk7XHJcbiAgICB2YXIgcyA9IHRvZGF5LmdldFNlY29uZHMoKTtcclxuICAgIG0gPSBjaGVja1RpbWUobSk7XHJcbiAgICBzID0gY2hlY2tUaW1lKHMpO1xyXG5cclxuICAgIGlmIChoIDwgMTApIHtcclxuICAgICAgICBoID0gXCIwXCIgKyBoO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAkKFwiI2Nsb2NrVGl0bGVcIikuaHRtbChoICsgXCI6XCIgKyBtICsgXCI6XCIgKyBzKTtcclxuXHJcbiAgICB2YXIgdCA9IHNldFRpbWVvdXQoc3RhcnRUaW1lLCA1MDApO1xyXG59XHJcbmZ1bmN0aW9uIGNoZWNrVGltZShpKSB7XHJcbiAgICBpZiAoaSA8IDEwKSB7aSA9IFwiMFwiICsgaX07IFxyXG4gICAgcmV0dXJuIGk7XHJcbn1cclxuXHJcbmNvbnN0IHF1b3Rlc0FycmF5ID0gW1xyXG4gICAgYFwiQSBqb3VybmV5IG9mIGEgdGhvdXNhbmQgbWlsZXMgYmVnaW5zIHdpdGggYSBzaW5nbGUgc3RlcC5cIlxyXG4gICAg4oCTIExhbyBUenVgLFxyXG4gICAgYFwiVGhlIG9ubHkgaW1wb3NzaWJsZSBqb3VybmV5IGlzIHRoZSBvbmUgeW91IG5ldmVyIGJlZ2luLlwiXHJcbiAgICDigJMgVG9ueSBSb2JiaW5zYCxcclxuXHJcbiAgICBgXCJXZSBhcmUgd2hhdCB3ZSByZXBlYXRlZGx5IGRvLiBFeGNlbGxlbmNlLCB0aGVuLCBpcyBub3QgYW4gYWN0IGJ1dCBhIGhhYml0LlwiXHJcbiAgICDigJMgQXJpc3RvdGxlYCxcclxuICAgIGBcIkRvbuKAmXQganVkZ2UgZWFjaCBkYXkgYnkgdGhlIGhhcnZlc3QgeW91IHJlYXAsIGJ1dCBieSB0aGUgc2VlZHMgdGhhdCB5b3UgcGxhbnQuXCJcclxuICAgIOKAkyBSb2JlcnQgTG91aXMgU3RldmVuc29uYCxcclxuXHJcbiAgICBgXCJXcml0aW5nIGlzIGFuIGV4cGxvcmF0aW9uLiBZb3Ugc3RhcnQgZnJvbSBub3RoaW5nIGFuZCBsZWFybiBhcyB5b3UgZ28uXCJcclxuICAgIC0gRS4gTC4gRG9jdG9yb3dgLFxyXG4gICAgYFwiQWRhcHQgd2hhdCBpcyB1c2VmdWwsIHJlamVjdCB3aGF0IGlzIHVzZWxlc3MsIGFuZCBhZGQgd2hhdCBpcyBzcGVjaWZpY2FsbHkgeW91ciBvd24uXCJcclxuICAgIC0gQnJ1Y2UgTGVlYFxyXG5dO1xyXG5cclxuXHJcbmNvbnN0IHF1ZXN0aW9uc0FycmF5ID0gW1xyXG5cIldoYXQncyBuZXh0IG9uIHlvdXIgbWluZD9cIixcclxuXCJXaGF0J3MgeW91ciBwbGFuIGZvciB0b2RheT9cIixcclxuXCJXaGF0IGRvIHlvdSB3YW50IHRvIGRvIG5leHQ/XCIsXHJcblwiV2hhdCBpcyB5b3VyIG1haW4gZm9jdXMgdG9kYXk/XCIsXHJcblwiV2hhdCdzIG5leHQgb24geW91ciBsaXN0P1wiXHJcbl07XHJcblxyXG5cclxuY29uc3QgYXJyYXlPZkJhY2tncm91bmRzID0gW1xyXG5cclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9jbG91ZHNjaXR5LmpwZWdcIiwgLy8ganVzdCBpbiBjYXNlIGRhdGUgZ2V0cyB0byAwIHNvbWVkYXkgOnxcclxuICAgIFxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL2FwcGxlLmpwZWdcIixcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9iZWFjaGFuYW5hcy5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvYmVhY2hjaXR5LmpwZWdcIixcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9iaWtlLmpwZWdcIixcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9idWxiLmpwZWdcIixcclxuICAgIFxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL2JvYXQuanBnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvYm90dGxlLmpwZWdcIixcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9jaGVycmllcy5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvY2hlc3MuanBlZ1wiLFxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL2Nsb3Vkcy5qcGVnXCIsXHJcbiAgICBcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9mZXJyYXJpLmpwZWdcIixcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9mb3Jlc3Ryb2FkLmpwZ1wiLFxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL2dsYXNzZXMuanBlZ1wiLFxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL2d1aXRhci5qcGdcIixcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9oZWFkcGhvbmVzLmpwZWdcIixcclxuXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvaGlnaHdheS5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvaG9tZS5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvamV0ZW5naW5lLmpwZ1wiLFxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL2tpdHRlbi5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvbG9ncy5qcGVnXCIsXHJcblxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL21hdGNoLmpwZ1wiLFxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL3BhcmtlZGlud2lsZC5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvcm9hZC5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvcm9wZS5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvc2FuZGFscy5qcGVnXCIsXHJcblxyXG4gICAgXCIuLi9SZXNvdXJjZXMvaW1nL2NvdmVyL3NlYXJvY2tzLmpwZWdcIixcclxuICAgIFwiLi4vUmVzb3VyY2VzL2ltZy9jb3Zlci9za3luaWdodC5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvdGh1bmRlci5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvdW5kZXJ3YXRlci5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvd2luZy5qcGVnXCIsXHJcbiAgICBcIi4uL1Jlc291cmNlcy9pbWcvY292ZXIvd29sdmVzLmpwZWdcIlxyXG5dO1xyXG5cclxuZnVuY3Rpb24gY2hhbmdlUXVvdGUobnVtLCB0b2Rvcykge1xyXG5cclxuICAgIGxldCByYW5kb21RdW90ZSA9ICcnO1xyXG5cclxuICAgIGlmIChudW0gPT0gMCkge1xyXG4gICAgICAgICQoXCIjcXVlc3Rpb25zVGl0bGVcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgJChcIiNxdW90ZVRpdGxlXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcclxuICAgICAgICAgcmFuZG9tUXVvdGUgPSBxdW90ZXNBcnJheVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNBcnJheS5sZW5ndGgpXTtcclxuICAgICAgICAkKFwiI3F1b3RlVGl0bGVcIikudGV4dChyYW5kb21RdW90ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICBpZiAodG9kb3MgPT0gMCkge1xyXG4gICAgICAgICQoXCIjcXVvdGVUaXRsZVwiKS50ZXh0KGBZb3UgaGF2ZSBubyB1bmZpbmlzaGVkIHRvZG9zYCk7ICAgIFxyXG4gICAgICAgIH0gZWxzZSBpZiAodG9kb3MgPT0gMSkge1xyXG4gICAgICAgICQoXCIjcXVvdGVUaXRsZVwiKS50ZXh0KGBZb3UgaGF2ZSAke3RvZG9zfSB1bmZpbmlzaGVkIHRvZG8gYmVsb3dgKTsgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkKFwiI3F1b3RlVGl0bGVcIikudGV4dChgWW91IGhhdmUgJHt0b2Rvc30gdW5maW5pc2hlZCB0b2RvcyBiZWxvd2ApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJChcIiNxdWVzdGlvbnNUaXRsZVwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICAgICAgcmFuZG9tUXVvdGUgPSBxdWVzdGlvbnNBcnJheVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdWVzdGlvbnNBcnJheS5sZW5ndGgpXTtcclxuICAgICAgICAkKFwiI3F1ZXN0aW9uc1RpdGxlXCIpLnRleHQocmFuZG9tUXVvdGUpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlQmFja2dyb3VuZEltZygpIHtcclxuXHJcbiAgICAvLyBsZXQgcmFuZEltZyA9IGFycmF5T2ZCYWNrZ3JvdW5kc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJheU9mQmFja2dyb3VuZHMubGVuZ3RoKV07XHJcblxyXG4gICAgbGV0IHRvZGF5ID0gbmV3IERhdGUoKS5nZXREYXRlKCk7XHJcblxyXG4gICAgJCgnI29wZW5pbmdEaXYnKS5mYWRlVG8oNTAwLCAwLjUsIGZ1bmN0aW9uKCkgICB7XHJcbiAgIFxyXG4gICAgICAgICQodGhpcykuY3NzKHtcclxuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kXCI6IGB1cmwoJyR7YXJyYXlPZkJhY2tncm91bmRzW3RvZGF5XX0nKWAsXHJcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZC1hdHRhY2htZW50XCI6IFwiZml4ZWRcIixcclxuICAgICAgICAgICAgXCJvdmVyZmxvd1wiOiBcImhpZGRlblwiLFxyXG4gICAgICAgICAgICBcImJhY2tncm91bmQtcG9zaXRpb25cIjogXCJjZW50ZXJcIixcclxuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxyXG4gICAgICAgICAgICBcImJhY2tncm91bmQtc2l6ZVwiOiBcImNvdmVyXCIsXHJcbiAgICAgICAgICAgIFwiLXdlYmtpdC1iYWNrZ3JvdW5kLXNpemVcIjogXCJjb3ZlclwiLFxyXG4gICAgICAgICAgICBcIi1tb3otYmFja2dyb3VuZC1zaXplXCI6IFwiY292ZXJcIixcclxuICAgICAgICAgICAgXCItby1iYWNrZ3JvdW5kLXNpemVcIjogXCJjb3ZlclwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSkuZmFkZVRvKDUwMCwgMSk7XHJcblxyXG59XHJcblxyXG5cclxuLyogU2Nyb2xsaW5nIEFyb3VuZCAqLyBcclxuXHJcbiQoXCIjc2Nyb2xsRG93blwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuICAgICAgICBzY3JvbGxUb3A6ICQoXCIjY29udGFpbmVyQmdcIikub2Zmc2V0KCkudG9wXHJcbiAgICB9LCAxMDAwKTtcclxufSk7XHJcblxyXG5cclxuLyogTmF2YmFyIExpIElubmVyIFVsIGxpc3RzICovIFxyXG5cclxuXHJcbmZ1bmN0aW9uIGxpbWl0aW5nKCkge1xyXG4gIFxyXG4gICAgY29uc3QgbGltaXRBcnJheSA9IFtcIk5vIGxpbWl0XCIsIDEsIDMsIDUsIDEwLCAxNSwgMjBdO1xyXG4gIFxyXG4gICAgICBsZXQgYWRkTGltaXQgPSAnJztcclxuICAgICAgbGltaXRBcnJheS5mb3JFYWNoKChsaW0sIGkpID0+IHtcclxuICAgICAgICBhZGRMaW1pdCArPSBgXHJcbiAgICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvXCI+XHJcbiAgICAgIDxpbnB1dCBjbGFzcz1cImxpbWl0UmFkaW9cIiAgbmFtZT1cImxpbWl0XCIgdHlwZT1cInJhZGlvXCI+XHJcbiAgICAgIDxzcGFuIHN0eWxlPVwiZm9udC13ZWlnaHQ6IDEwMDsgdGV4dC1hbGlnbjogY2VudGVyO1wiPiR7bGltfTwvc3Bhbj5cclxuICAgICAgPC9sYWJlbD5cclxuICAgIGA7XHJcbiAgICAgIH0pO1xyXG4gIFxyXG4gICAgJChcIiNsaW1pdFVsXCIpLmFwcGVuZChhZGRMaW1pdCk7XHJcbiAgXHJcbiAgICAkKFwiLmxpbWl0UmFkaW86ZXEoMClcIikuYXR0cignY2hlY2tlZCcsIHRydWUpO1xyXG4gIFxyXG4gIFxyXG4gICAgICAgIC8qIExpbWl0IHNlYXJjaCAqL1xyXG4gIFxyXG4gICAgICAgICQoXCIubGltaXRSYWRpb1wiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICBcclxuICAgICAgICBsaW1pdCA9ICQodGhpcykucGFyZW50KFwiLnJhZGlvXCIpLnRleHQoKTtcclxuICAgICAgICBsaW1pdCA9IGxpbWl0LnRyaW0oKTsgIFxyXG4gIFxyXG4gICAgICAgIHNlYXJjaCgpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNvcnRpbmcoKSB7XHJcbiAgXHJcbiAgICAgICAgLyogU29ydCBkb2N1bWVudHMgKi9cclxuICBcclxuICAgICAgICAkKFwiLnNvcnRSYWRpb1wiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgICBzb3J0ID0gJCh0aGlzKS5wYXJlbnQoXCIucmFkaW9cIikudGV4dCgpO1xyXG4gICAgICBzb3J0ID0gc29ydC50cmltKCk7ICBcclxuICBcclxuICAgICAgc2VhcmNoKCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgXHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGRpc3BsYXlpbmcoKSB7XHJcbiAgICBcclxuICAgIGNvbnN0IGRpc3BsYXlBcnJheSA9IFtcIkFsbFwiLCBcIkNvbXBsZXRlZFwiLCBcIk5vdCBjb21wbGV0ZWRcIl07XHJcbiAgXHJcbiAgICAgIGxldCBhZGREaXNwbGF5ID0gJyc7XHJcbiAgICAgIGRpc3BsYXlBcnJheS5mb3JFYWNoKChkaXMsIGkpID0+IHtcclxuICAgICAgYWRkRGlzcGxheSArPSBgXHJcbiAgICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvXCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJkaXNwbGF5UmFkaW9cIiBuYW1lPVwiZGlzcGxheVwiIHR5cGU9XCJyYWRpb1wiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogMTAwOyB0ZXh0LWFsaWduOiBjZW50ZXI7XCI+JHtkaXN9PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgIGA7XHJcbiAgICB9KTtcclxuICBcclxuICAgICQoXCIjZGlzcGxheVVsXCIpLmFwcGVuZChhZGREaXNwbGF5KTtcclxuICBcclxuICAgICQoXCIuZGlzcGxheVJhZGlvOmVxKDApXCIpLmF0dHIoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICBcclxuICAgICAgXHJcbiAgICAgICAgICAvKiBEaXNwbGF5IGRvY3VtZW50cyAqL1xyXG4gIFxyXG4gICAgICAgICQoXCIuZGlzcGxheVJhZGlvXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gIFxyXG4gICAgICBkaXNwbGF5ID0gJCh0aGlzKS5wYXJlbnQoXCIucmFkaW9cIikudGV4dCgpO1xyXG4gICAgICBkaXNwbGF5ID0gZGlzcGxheS50cmltKCk7ICBcclxuICBcclxuICAgICAgaWYgKGRpc3BsYXkgPT0gXCJOb3QgY29tcGxldGVkXCIpIHtcclxuICAgICAgICAkKFwiLnNvcnRDb21wbGV0ZWRcIikuYXR0cihcImRpc2FibGVkXCIsdHJ1ZSk7XHJcbiAgICAgICAgJChgLmxhYmVsQ29tcGxldGVkYCkuY3NzKHsgXCJjdXJzb3JcIjogXCJkZWZhdWx0XCIgfSk7XHJcbiAgICAgICAgJChcIi5sYWJlbENvbXBsZXRlZFwiKS5ob3ZlciggIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICQodGhpcykuY3NzKFwiYmFja2dyb3VuZFwiLCBcIiMyMjJcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChcIi5zb3J0Q29tcGxldGVkXCIpLmF0dHIoXCJkaXNhYmxlZFwiLGZhbHNlKTtcclxuICAgICAgICAkKGAubGFiZWxDb21wbGV0ZWRgKS5jc3MoeyBcImN1cnNvclwiOiBcInBvaW50ZXJcIiB9KTtcclxuICBcclxuICAgICAgICAkKFwiLmxhYmVsQ29tcGxldGVkXCIpLm9uKCdtb3VzZWVudGVyJywgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICQodGhpcykuY3NzKFwiYmFja2dyb3VuZFwiLCBcIiMwMDdCRkZcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgXHJcbiAgICAgICAgJChcIi5sYWJlbENvbXBsZXRlZFwiKS5vbignbW91c2VsZWF2ZScsICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkKHRoaXMpLmNzcyhcImJhY2tncm91bmRcIiwgXCIjMjIyXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gIFxyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHNlYXJjaCgpO1xyXG4gIFxyXG4gICAgICB9KTtcclxuICBcclxuICB9XHJcbiAgXHJcblxyXG4gICAgLyogRmFkZSBpbiAvIG91dCBuYXZiYXIgaW5uZXIgbGlzdHMgKi9cclxuICAgXHJcbiQoXCIubmF2YmFyTGlcIikub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICQodGhpcykuZmluZChcIi5pbm5lclVsXCIpLmZhZGVJbigpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgICQoXCIubmF2YmFyTGlcIikub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpIHtcclxuICAgICQodGhpcykuZmluZChcIi5pbm5lclVsXCIpLmZhZGVPdXQoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcblxyXG5cclxuLyogU2VhcmNoIFRvZG9zICovXHJcblxyXG5cclxuZnVuY3Rpb24gc2VhcmNoKCkge1xyXG5cclxuICAgIC8vIGZvciBub3cgXHJcbiAgICBpZHNBcnIgPSBbXTsgXHJcblxyXG4gICAgbGV0IHRleHQgPSAkKFwiLnNlYXJjaFRvZG9zRm9ybVwiKS52YWwoKTtcclxuXHJcbiAgICBpZiAodGV4dCA9PSAnJykge1xyXG4gICAgICB0ZXh0ID0gXCIuXCI7XHJcbiAgICB9XHJcblxyXG5cclxuICAgICAgJC5hamF4KHtcclxuICAgICAgICB0eXBlOiBcIkdFVFwiLFxyXG4gICAgICAgIHVybDogYC90b2Rvcy8ke3RleHR9LyR7ZGlzcGxheX0vJHtsaW1pdH0vJHtzb3J0fS9gLFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGlzdCA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgaWQgPSAnJztcclxuICAgICAgICAgICAgdmFyIHRleHQgPSAnJztcclxuICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gJyc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEudG9kb3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlkID0gZGF0YS50b2Rvc1tpXS5faWQudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgdGV4dCA9IGRhdGEudG9kb3NbaV0udGV4dC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRhdGEudG9kb3NbaV0uZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gJyc7XHJcbiAgICAgICAgICAgIGxldCBmaW5pc2hlZCA9ICcnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHNob3J0ZW5UaXRsZSA9IGRhdGEudG9kb3NbaV0udGV4dDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChkYXRhLnRvZG9zW2ldLnRleHQubGVuZ3RoID4gNTApIHtcclxuICAgICAgICAgICAgICAgIHNob3J0ZW5UaXRsZSA9IGRhdGEudG9kb3NbaV0udGV4dC5zdWJzdHIoMCw1MCkgKyBcIi4uLlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoZGF0YS50b2Rvc1tpXS5jb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgIHN0YXR1cyA9IFwiQ29tcGxldGVkXCI7XHJcbiAgICAgICAgICAgICBmaW5pc2hlZCA9IFwiQ29tcGxldGVkIEF0OiBcIiArIGRhdGEudG9kb3NbaV0uY29tcGxldGVkQXQuc3Vic3RyKDEyLDgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgc3RhdHVzID0gXCJOb3QgY29tcGxldGVkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxpc3QgKz0gYDxkaXYgY2xhc3M9XCJjb250YWluZXIgdG9kb0NvbnRhaW5lclwiIG9uY2xpY2s9XCJhZGRJZFRvQXJyYXkoXFxgYCArIGRhdGEudG9kb3NbaV0uX2lkICsgYFxcYClcIj5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMlwiPlxyXG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJ0aXRsZVwiPiR7c2hvcnRlblRpdGxlfTwvaDM+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+PHAgY2xhc3M9XCJzdGF0dXNcIj4ke3N0YXR1c308L3A+PC9kaXY+XHJcbiAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj48cCBjbGFzcz1cImZpbmlzaGVkXCI+JHtmaW5pc2hlZH08L3A+IDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCIgc3R5bGU9XCJoZWlnaHQ6IDEwNXB4O1wiPiBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNCB0b2RvQnRuQ29sXCI+XHJcbiAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIHRvZG9CdG5cIiB0aXRsZT1cIlVwZGF0ZSBUb2RvXCIgb25jbGljaz1cIm9wZW5Nb2RhbChcXGBgICsgdGV4dCArIGBcXGAsIFxcYGAgKyBkZXNjcmlwdGlvbiArIGBcXGAsICR7ZGF0YS50b2Rvc1tpXS5jb21wbGV0ZWR9LFxcYGAgKyBpZCArIGBcXGAsXFxgYCArIGRhdGEudG9kb3NbaV0uY29tcGxldGVkQXQgKyBgXFxgLCAke2l9LCBcXGBgICsgZGF0YS50b2Rvc1tpXS5jcmVhdGVkQXQgKyBgXFxgKVwiPjxpIGNsYXNzPVwiZmEgZmEtcGVuY2lsXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTQgdG9kb0J0bkNvbFwiPlxyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3V0ZXJcIiB0aXRsZT1cIkNvbXBsZXRlIFRvZG9cIiBvbmNsaWNrPSdjb21wbGV0ZVRvZG8oJHtkYXRhLnRvZG9zW2ldLmNvbXBsZXRlZH0sXFxgYCArIGlkICsgYFxcYCwgJHtpfSknPlxyXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXRjaFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS00IHRvZG9CdG5Db2xcIj5cclxuICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biB0b2RvQnRuXCIgdGl0bGU9XCJSZW1vdmUgVG9kb1wiIGlkPVwicmVtb3ZlVG9kb0J0blwiIG9uY2xpY2s9XCJkZWxldGVUb2RvKFxcYGAgKyBpZCArIGBcXGApXCI+PGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgPC9kaXY+YDtcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuIHlvdSBzZWFyY2ggeW91IHJlbW92ZSBhbGwgcHJldmlvdXMgdG9kb3MgYW5kIHJlcGxhY2Ugd2l0aCB0aGUgbmV3IG9uZXMgdGhhdCBmaXQgdGhlIHNlYXJjaFxyXG4gICAgICAgICAgICAkKFwiLnRvZG9Db250YWluZXJcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICQoXCIjbGlzdE9mVG9kb3NcIikuYXBwZW5kKGxpc3QpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGFkZERhcmtTZWxlY3QgPSAkKFwiLnRvZG9Db250YWluZXJcIik7XHJcblxyXG4gICAgICAgICAgICBhZGREYXJrU2VsZWN0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwiZGFya1NlbGVjdFwiKTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLyogb25jZSB0ZXh0IGlzIGFkZGVkIHdlIGNhbiB0b2dnbGUgdGhlIGNsYXNzIHdpdGggY291bnRlciBmcm9tIGFub3RoZXIgZm9yIGxvb3AgKi9cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAgZGF0YS50b2Rvcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnRvZG9zW2ldLmNvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoYC5zd2l0Y2g6ZXEoJHtpfSlgKS5hZGRDbGFzcyhcIm1vdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJChgLnRpdGxlOmVxKCR7aX0pYCkuY3NzKHsgXCJ0ZXh0LWRlY29yYXRpb25cIjogXCJsaW5lLXRocm91Z2hcIiB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAkKGAuc3dpdGNoOmVxKCR7aX0pYCkucmVtb3ZlQ2xhc3MoXCJtb3ZlXCIpO1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qIEVOVEVSIEtFWSAqL1xyXG5cclxuICAgIC8vIFBvc3RpbmcgdG9kb3NcclxuXHJcbiAkKFwiI2lucHV0VGl0bGVcIikua2V5dXAoZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgaWYoZXZlbnQua2V5Q29kZSA9PSAxMyl7XHJcbiAgICAgc3VibWl0KCk7XHJcbiAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTZWFyY2hpbmcgdG9kb3NcclxuXHJcbiAgICAkKFwiLnNlYXJjaFRvZG9zRm9ybVwiKS5rZXl1cChmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgaWYoZXZlbnQua2V5Q29kZSA9PSAxMyl7XHJcbiAgICAgICAgIHNlYXJjaCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgICAgICAvKiBERUxFVEUgS0VZICovIFxyXG5cclxuICAgICAgICBsZXQgYWRkSWRUb0FycmF5ID0gKGlkKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIGlkc0Fyci5pbmNsdWRlcyhpZCkgKSB7XHJcbiAgICAgICAgICAgICAgICBpZHNBcnIuc3BsaWNlKGlkc0Fyci5maW5kSW5kZXgoaW5kZXggPT4gaW5kZXggPT0gaWQpKTsgLy8gaWYgZWxlbWVudCBpcyBpbiBhcnJheSwgZmluZCBpbmRleCAmIHJlbW92ZSBlbGVtZW50ICBcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlkc0Fyci5wdXNoKGlkKTsgICAgLy8gZWxzZSBwdXNoIGl0IHRvIGFycmF5XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgIGNvbnNvbGUubG9nKGlkc0Fycik7XHJcbiAgICBcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBLZXlQcmVzc0NoZWNrKGV2ZW50KXtcclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDQ0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBhZGREYXJrU2VsZWN0Lmhhc0NsYXNzKFwiZGFya1NlbGVjdFwiKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAvLyBhZGQgc2Nyb2xsIHBvc2l0aW9uIGhlcmUgYXMgd2VsbFxyXG4gICAgICAgICAgICAgICAgICAgLy8gdW5sZXNzIHRvZG9zIGFycmF5IGlzIGVtcHR5XHJcblxyXG4gICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvdG9kb3MvJyArIGlkc0FycixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnREVMRVRFJyxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciB0aGlzIHJlZnJlc2ggdG8gYXZvaWQgc2Nyb2xsIGVycm9yXHJcblxyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgfVxyXG5cclxuIl19
