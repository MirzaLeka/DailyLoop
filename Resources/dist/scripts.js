"use strict";var limit="No limit",display="Display all",sort="Date created";$(window).scroll(function(){$("#info").offset().top+50+$("#info").outerHeight()-$(window).height()<=$(this).scrollTop()?($("#scrollBack").fadeIn(),$("#logoutHeader").css("color","#007BFF"),$("#logoutHeader").on("mouseenter",function(){$(this).css("color","#0064d1")}),$("#logoutHeader").on("mouseleave",function(){$(this).css("color","#007BFF")})):($("#scrollBack").fadeOut(),$("#logoutHeader").css("color","#444"),$("#logoutHeader").on("mouseenter",function(){$(this).css("color","#000")}),$("#logoutHeader").on("mouseleave",function(){$(this).css("color","#444")}))}),$("#scrollBack").click(function(){$("html, body").animate({scrollTop:0},1e3)});var scrollPosition="",addDarkSelect=void 0,idsArr=[];function getTodos(){var e=getCookie()[0].substr(9,999).toString();e=e.trim(),$.ajax({type:"GET",url:"/todos",headers:{"x-auth":e},success:function(e){if(0==e.todos.length)sessionStorage.removeItem("scrollPosition"),$(".notYet").css("display","none"),$("#inputTitle").attr("placeholder","Submit your first todo"),changeQuote(0,0);else{for(var o=0,t=0;t<e.todos.length;t++)1==e.todos[t].completed&&o++;$(".notYet").css("display","block"),$("#inputTitle").attr("placeholder",""),changeQuote(1,e.todos.length-o)}var s="",i="",n="",a="";for(t=0;t<e.todos.length;t++){i=e.todos[t]._id.toString(),n=e.todos[t].text.toString(),a=e.todos[t].description;var l="",d="",r=e.todos[t].text;50<e.todos[t].text.length&&(r=e.todos[t].text.substr(0,50)+"..."),e.todos[t].completed?(l="Completed",d="Completed At: "+e.todos[t].completedAt.substr(12,8)):l="Not completed",s+='<div class="container todoContainer" onclick="addIdToArray(`'+e.todos[t]._id+'`)">\n    \n     <div class="row">\n      <div class="col-sm-9">\n<div class="row">\n<div class="col-sm-12">\n<h3 class="title">'+r+'</h3>\n    </div>\n</div>\n <div class="row">\n      \n <div class="col-sm-6"><p class="status">'+l+'</p></div>\n <div class="col-sm-6"><p class="finished">'+d+'</p> </div>\n  </div>\n        </div>\n    <div class="col-sm-3" style="height: 105px;"> \n    <div class="col-sm-4 todoBtnCol">\n <button class="btn todoBtn" title="Update Todo" onclick="openModal(`'+n+"`, `"+a+"`, "+e.todos[t].completed+",`"+i+"`,`"+e.todos[t].completedAt+"`, "+t+", `"+e.todos[t].createdAt+'`)"><i class="fa fa-pencil" aria-hidden="true"></i></button>\n </div>\n <div class="col-sm-4 todoBtnCol">\n \n <div class="outer" title="Complete Todo" onclick=\'completeTodo('+e.todos[t].completed+",`"+i+"`, "+t+')\'>\n <div class="switch"></div>\n </div>\n  </div>        \n<div class="col-sm-4 todoBtnCol">\n   <button class="btn todoBtn" title="Remove Todo" id="removeTodoBtn" onclick="deleteTodo(`'+i+'`)"><i class="fa fa-times" aria-hidden="true"></i></button>\n         </div>\n    </div>\n         \n      </div>\n </div>'}$("#listOfTodos").append(s);for(t=0;t<e.todos.length;t++)e.todos[t].completed?($(".switch:eq("+t+")").addClass("move"),$(".title:eq("+t+")").css({"text-decoration":"line-through"})):$(".switch:eq("+t+")").removeClass("move");(addDarkSelect=$(".todoContainer")).on("click",function(){$(this).toggleClass("darkSelect")}),$(".outer, .todoBtn").click(function(e){var o=$(window).scrollTop();sessionStorage.setItem("scrollPosition",o),e.stopPropagation(),$(".todoContainer").removeClass("darkSelect"),idsArr=[]})}})}function submit(){var e=$("#inputTitle").val();if(""==e)return $("#submitTodoError").show(),void $("#submitTodoError").text("Please insert text to submit todo.");if(200<e.length)return $("#submitTodoError").show(),void $("#submitTodoError").text("Please keep todo title no longer than 200 characters.");var o={text:e};sessionStorage.removeItem("scrollPosition");var t=getCookie()[0].substr(9,999).toString();t=t.trim(),$.ajax({type:"POST",url:"/todos",contentType:"application/json",dataType:"json",data:JSON.stringify(o),headers:{"x-auth":t},success:function(e){location.reload()}})}function clearSubmitTodoError(){$("#submitTodoError").hide()}function deleteTodo(e){$.ajax({url:"/todos/"+e,type:"DELETE",success:function(){location.reload()}})}function deleteAllTodos(){sessionStorage.removeItem("scrollPosition"),$.ajax({url:"/todos",type:"DELETE",success:function(){}}),window.location.reload()}function completeTodo(e,o,t){var s="";if(e)e=!1,$(".switch:eq("+t+")").removeClass("move"),s=null;else{e=!0,$(".switch:eq("+t+")").addClass("move");var i=(new Date).toString();s=i=i.substr(4,20)}var n={completed:e,completedAt:s};$.ajax({url:"/todos/"+o,data:JSON.stringify(n),type:"PATCH",contentType:"application/json",processData:!1,dataType:"json",success:function(e){location.reload()}})}function updateTodo(e,o,t,s,i,n){var a=0;e=(e=(e=$("#todoTitleInModal").val()).replace(/"/g,"'")).trim(),o=(o=(o=$("textarea").val()).replace(/"/g,"'")).trim(),""==e?($("#todoTitleInModalError").css("display","block"),$("#todoTitleInModalError").text("Title must have at least one character"),a++):200<e.length&&($("#todoTitleInModalError").show(),$("#todoTitleInModalError").text("Exceeded maximum number of characters (200)"),a++),2e3<o.length&&($("#textareaError").show(),$("#textareaError").text("Exceeded maximum number of characters (2000)"),a++);var l={text:e,description:o,completed:t,completedAt:n};i&&0==a&&$.ajax({url:"/todos/"+s,data:JSON.stringify(l),type:"PATCH",contentType:"application/json",processData:!1,dataType:"json",success:function(e){$("#myModal").fadeOut(),location.reload()}})}$(document).ready(function(){null!=(scrollPosition=sessionStorage.getItem("scrollPosition"))&&$("html, body").animate({scrollTop:scrollPosition},100),getUser(),startTime(),changeBackgroundImg(),getTodos(),limiting(),sorting(),displaying()});var data={},keepTheDate=null,newDate="";function combineValues(e,o,t,s,i,n,a){"string"!=typeof n&&null!=keepTheDate?keepTheDate=keepTheDate:"string"==typeof n||(keepTheDate=a),"string"==typeof e&&(data.text=e,keepTheDate=$(".switchModal").hasClass("moveModal")?(data.completed=!0,keepTheDate):(data.completed=!1,null),i=!0),"number"==typeof e&&(data.completed=t,i=!1,keepTheDate=t?n:null),updateTodo(data.text,o,data.completed,s,i,keepTheDate)}var modalStatus="",modalFinished="",toggleCounter=0,toggleValue=[];function completeInModal(e,o,t,s,i,n,a){toggleValue[a]=0==toggleCounter?!t:!toggleValue[a];var l=(new Date).toString();l=l.substr(4,20),modalFinished=l,toggleValue[a]?($(".switchModal").addClass("moveModal"),modalStatus="Completed",$("#modalFinished").text(modalFinished)):(modalStatus="Not Completed",$(".switchModal").removeClass("moveModal"),$("#modalFinished").html('<i class="fa fa-question-circle" style="font-size:24px"></i>')),$("#modalStatus").text(modalStatus),toggleCounter++,combineValues(e,o,toggleValue[a],s,i,modalFinished,n)}function openModal(e,o,t,s,i,n,a){modal.style.display="flex",modalFinished=i,modalStatus=t?"Completed":"Not Completed";var l='\n<p class="closeModal" onclick="closeModal(47, '+t+",`"+s+'`, false)">&times</p>\n          \n<h3 class="modalTitle" style="text-align: center;\ndisplay: block;\nmargin: 0 auto;\nwidth: 100%; margin-top: 10px;">Update Todo</h3>\n';$(".modal-header").html(l),mb='<div class="modalPause">  \n<h5 class="pauseDesc">NAME</h5>\n<div class="container bg-3 text-center" style="width: 768px;">\n<div class="row">\n<div class="col-sm-3"> </div>\n<div class="col-sm-6">\n<input id="todoTitleInModal" oninput="oninputTodoTitleInModal()" autofocus style="width: 100%; background: #FFF; border: 2px solid #CCC; color: #000; margin-top: 4px;" />\n<p id="todoTitleInModalError"></p>\n    </div>\n   \n<div class="col-sm-3"> </div>\n        </div>\n</div>  \n </div>  ',mb+='<div class="modalPause">  \n<h5 class="pauseDesc">DESCRIPTION</h5>\n<div class="container bg-3 text-center" style="width: 768px;">\n<div class="row">\n<div class="col-sm-3"> </div>\n<div class="col-sm-6">\n<textarea id="textarea" placeholder="Optional" oninput="oninputTextarea()" rows=5 style="width: 100%; background: #FFF; border: 2px solid #CCC; color: #000; margin-top: 4px; resize: none;"></textarea>\n<p id="textareaError"></p>\n    </div>\n   \n<div class="col-sm-3"> </div>\n        </div>\n</div>  \n </div>  ',mb+=' \n <div class="modalPause">  \n<h5 class="pauseDesc">DETAILS</h5>\n<div class="container bg-3 text-center" style="width: 768px; height: 85px; padding-bottom: 0px; margin-top: 10px;">\n<div class="row">\n<div class="col-sm-3"></div>\n<div class="col-sm-2">\n<p>Status:</p>\n</div>\n<div class="col-sm-2">\n<p id="modalStatus">'+modalStatus+'</p>\n</div>\n<div class="col-sm-2">\n<div class="outerModal" title="Complete Todo" id="toggleBtn" onclick="completeInModal(47, `'+o+"` , "+t+",`"+s+"`, 'noRefresh', `"+i+"`, "+n+')" style="margin: 0 auto; text-align: center">\n<div class="switchModal"></div>\n</div>\n    \n<div class="col-sm-3"></div>\n    </div>\n</div>\n<div class="row" style="padding-top: 15px;">\n<div class="col-sm-3"></div>\n<div class="col-sm-2">\n<p id="completeAtPar">Created   Completed:</p>\n</div>\n<div class="col-sm-2">\n<p class="modalDetails">'+a+'</p>\n</div>\n<div class="col-sm-2">\n<p class="modalDetails" id="modalFinished">'+modalFinished+'</p>\n</div>\n<div class="col-sm-3"></div>\n        </div>\n    </div>\n</div>\n',$(".modal-body").html(mb),t?(modalStatus="Completed",$(".switchModal").addClass("moveModal"),$("#modalFinished").text(modalFinished)):(modalStatus="Not Completed",$(".switchModal").removeClass("moveModal"),$("#modalFinished").html('<i class="fa fa-question-circle" style="font-size:24px"></i>'));var d='<button id="cancelBtn" class="modalBtns" onclick="closeModal(47, '+t+",`"+s+'`, false)">Cancel</button>\n<button id="updateBtn" class="modalBtns" onclick="combineValues(`'+e+"`, `"+o+"`,"+t+",`"+s+"`, true, 4,`"+i+'`)">Update</button>';$(".modal-footer").html(d);var r=e;$("textarea").text(o),$("#todoTitleInModal").val(r)}var modal=document.getElementById("myModal");function closeModal(e,o,t,s){toggleCounter=0,$("#myModal").fadeOut(),combineValues(e,o,t,s)}function oninputTextarea(){$("#textareaError").hide()}function oninputTodoTitleInModal(){$("#todoTitleInModalError").hide()}function startTime(){var e=new Date,o=e.getHours(),t=e.getMinutes(),s=e.getSeconds();t=checkTime(t),s=checkTime(s),o<10&&(o="0"+o),$("#clockTitle").html(o+":"+t+":"+s);setTimeout(startTime,500)}function checkTime(e){return e<10&&(e="0"+e),e}var quotesArray=["“A journey of a thousand miles begins with a single step.”\n    – Lao Tzu","“The only impossible journey is the one you never begin.”\n    – Tony Robbins","“We are what we repeatedly do. Excellence, then, is not an act but a habit.”\n    – Aristotle","“Don’t judge each day by the harvest you reap, but by the seeds that you plant.”\n    – Robert Louis Stevenson","“Writing is an exploration. You start from nothing and learn as you go.”\n    – E. L. Doctorow","“Adapt what is useful, reject what is useless, and add what is specifically your own.”\n    – Bruce Lee","“Start where you are. Use what you have. Do what you can.” \n    – Arthur Ashe","“Good, better, best. Never let it rest. 'Til your good is better and your better is best.” \n    – St. Jerome","“If you can dream it, you can do it.” \n    – Walt Disney","“Setting goals is the first step in turning the invisible into the visible.” \n    – Tony Robbins","“A creative man is motivated by the desire to achieve, not by the desire to beat others.” \n    – Ayn Rand","“He who does not live in the way of his beliefs starts to believe in the way he lives.”\n    – Umar ibn Al-Khattab"],questionsArray=["What's next on your mind?","What's your plan for today?","What do you want to do next?","What is your main focus today?","What's next on your list?"],arrayOfBackgrounds=["../Resources/img/cover/cloudscity.jpeg","../Resources/img/cover/apple.jpeg","../Resources/img/cover/beachananas.jpeg","../Resources/img/cover/beachcity.jpeg","../Resources/img/cover/bike.jpeg","../Resources/img/cover/bulb.jpeg","../Resources/img/cover/boat.jpg","../Resources/img/cover/bottle.jpeg","../Resources/img/cover/cherries.jpeg","../Resources/img/cover/chess.jpeg","../Resources/img/cover/clouds.jpeg","../Resources/img/cover/ferrari.jpeg","../Resources/img/cover/forestroad.jpg","../Resources/img/cover/glasses.jpeg","../Resources/img/cover/guitar.jpg","../Resources/img/cover/headphones.jpeg","../Resources/img/cover/highway.jpeg","../Resources/img/cover/home.jpeg","../Resources/img/cover/jetengine.jpg","../Resources/img/cover/kitten.jpeg","../Resources/img/cover/logs.jpeg","../Resources/img/cover/match.jpg","../Resources/img/cover/parkedinwild.jpeg","../Resources/img/cover/road.jpeg","../Resources/img/cover/rope.jpeg","../Resources/img/cover/sandals.jpeg","../Resources/img/cover/searocks.jpeg","../Resources/img/cover/skynight.jpeg","../Resources/img/cover/thunder.jpeg","../Resources/img/cover/underwater.jpeg","../Resources/img/cover/wing.jpeg","../Resources/img/cover/wolves.jpeg"];function changeQuote(e,o){var t="";0==e?($("#questionsTitle").css("display","none"),$("#quoteTitle").css("display","block"),t=quotesArray[Math.floor(Math.random()*quotesArray.length)],$("#quoteTitle").text(t)):(0==o?$("#quoteTitle").text("You have no unfinished todos"):1==o?$("#quoteTitle").text("You have "+o+" unfinished todo below"):$("#quoteTitle").text("You have "+o+" unfinished todos below"),$("#questionsTitle").css("display","block"),t=questionsArray[Math.floor(Math.random()*questionsArray.length)],$("#questionsTitle").text(t))}function changeBackgroundImg(){var e=(new Date).getDate();$("#openingDiv").fadeTo(500,.5,function(){$(this).css({background:"url('"+arrayOfBackgrounds[e]+"')","background-attachment":"fixed",overflow:"hidden","background-position":"center","background-repeat":"no-repeat","background-size":"cover","-webkit-background-size":"cover","-moz-background-size":"cover","-o-background-size":"cover"})}).fadeTo(500,1)}function limiting(){var t="";["No limit",1,3,5,10,15,20].forEach(function(e,o){t+='\n      <label class="radio">\n      <input class="limitRadio"  name="limit" type="radio">\n      <span style="font-weight: 100; text-align: center;">'+e+"</span>\n      </label>\n    "}),$("#limitUl").append(t),$(".limitRadio:eq(0)").attr("checked",!0),$(".limitRadio").click(function(){limit=(limit=$(this).parent(".radio").text()).trim(),search()})}function sorting(){$(".sortRadio").click(function(){sort=(sort=$(this).parent(".radio").text()).trim(),search()})}function displaying(){var t="";["All","Completed","Not completed"].forEach(function(e,o){t+='\n      <label class="radio">\n                <input class="displayRadio" name="display" type="radio">\n                <span style="font-weight: 100; text-align: center;">'+e+"</span>\n              </label>\n      "}),$("#displayUl").append(t),$(".displayRadio:eq(0)").attr("checked",!0),$(".displayRadio").click(function(){"Not completed"==(display=(display=$(this).parent(".radio").text()).trim())?($(".sortCompleted").attr("disabled",!0),$(".labelCompleted").css({cursor:"default"}),$(".labelCompleted").hover(function(){$(this).css("background","#222")})):($(".sortCompleted").attr("disabled",!1),$(".labelCompleted").css({cursor:"pointer"}),$(".labelCompleted").on("mouseenter",function(){$(this).css("background","#007BFF")}),$(".labelCompleted").on("mouseleave",function(){$(this).css("background","#222")})),search()})}function search(){idsArr=[];var e=$(".searchTodosForm").val();""==e&&(e="."),$.ajax({type:"GET",url:"/todos/"+e+"/"+display+"/"+limit+"/"+sort+"/",success:function(e){for(var o="",t="",s="",i="",n=0;n<e.todos.length;n++){t=e.todos[n]._id.toString(),s=e.todos[n].text.toString(),i=e.todos[n].description;var a="",l="",d=e.todos[n].text;50<e.todos[n].text.length&&(d=e.todos[n].text.substr(0,50)+"..."),e.todos[n].completed?(a="Completed",l="Completed At: "+e.todos[n].completedAt.substr(12,8)):a="Not completed",o+='<div class="container todoContainer" onclick="addIdToArray(`'+e.todos[n]._id+'`)">\n                \n                 <div class="row">\n                  <div class="col-sm-9">\n            <div class="row">\n            <div class="col-sm-12">\n            <h3 class="title">'+d+'</h3>\n                </div>\n            </div>\n             <div class="row">\n                  \n             <div class="col-sm-6"><p class="status">'+a+'</p></div>\n             <div class="col-sm-6"><p class="finished">'+l+'</p> </div>\n              </div>\n                    </div>\n                <div class="col-sm-3" style="height: 105px;"> \n                <div class="col-sm-4 todoBtnCol">\n             <button class="btn todoBtn" title="Update Todo" onclick="openModal(`'+s+"`, `"+i+"`, "+e.todos[n].completed+",`"+t+"`,`"+e.todos[n].completedAt+"`, "+n+", `"+e.todos[n].createdAt+'`)"><i class="fa fa-pencil" aria-hidden="true"></i></button>\n             </div>\n             <div class="col-sm-4 todoBtnCol">\n             \n             <div class="outer" title="Complete Todo" onclick=\'completeTodo('+e.todos[n].completed+",`"+t+"`, "+n+')\'>\n             <div class="switch"></div>\n             </div>\n              </div>        \n            <div class="col-sm-4 todoBtnCol">\n               <button class="btn todoBtn" title="Remove Todo" id="removeTodoBtn" onclick="deleteTodo(`'+t+'`)"><i class="fa fa-times" aria-hidden="true"></i></button>\n                     </div>\n                </div>\n                     \n                  </div>\n             </div>'}$(".todoContainer").remove(),$("#listOfTodos").append(o),(addDarkSelect=$(".todoContainer")).on("click",function(){$(this).toggleClass("darkSelect")}),$(".outer, .todoBtn").click(function(e){var o=$(window).scrollTop();sessionStorage.setItem("scrollPosition",o),e.stopPropagation(),$(".todoContainer").removeClass("darkSelect"),idsArr=[]});for(n=0;n<e.todos.length;n++)e.todos[n].completed?($(".switch:eq("+n+")").addClass("move"),$(".title:eq("+n+")").css({"text-decoration":"line-through"})):$(".switch:eq("+n+")").removeClass("move")}})}$("#scrollDown").click(function(){$("html, body").animate({scrollTop:$("#containerBg").offset().top},1e3)}),$(".navbarLi").on("mouseenter",function(){$(this).find(".innerUl").fadeIn()}),$(".navbarLi").on("mouseleave",function(){$(this).find(".innerUl").fadeOut()}),$("#inputTitle").keyup(function(e){13==e.keyCode&&submit()}),$(".searchTodosForm").keyup(function(e){13==e.keyCode&&search()});var addIdToArray=function(o){idsArr.includes(o)?idsArr.splice(idsArr.findIndex(function(e){return e==o})):idsArr.push(o)};function KeyPressCheck(e){if(44==e.keyCode&&addDarkSelect.hasClass("darkSelect")){var o=$(window).scrollTop();sessionStorage.setItem("scrollPosition",o),$.ajax({url:"/todos/"+idsArr,type:"DELETE",success:function(){location.reload()}})}}function getCookie(){var e=("; "+document.cookie).split("; "+name+"=");return 2==e.length?e.pop().split(";").shift():e}function getUser(){var e=getCookie()[0].substr(9,999).toString();e=e.trim(),$.ajax({type:"GET",url:"/users/me",headers:{"x-auth":e},success:function(e){document.querySelector("#helloTitle").textContent="Hello "+e.username}})}var logout=function(){var e=getCookie()[0].substr(9,999).toString();e=e.trim(),$.ajax({url:"/users/me/token",type:"DELETE",headers:{"x-auth":e},success:function(){window.location.href="/"}})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
